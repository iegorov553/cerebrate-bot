name: Auto-sync Translations

on:
  push:
    branches: [ staging ]
    paths:
      - 'bot/i18n/locales/ru.json'  # Trigger only on Russian (reference) file changes
  
  workflow_dispatch:  # Allow manual triggering
    inputs:
      force_sync:
        description: 'Force sync even without changes'
        required: false
        default: 'false'

jobs:
  auto-sync:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging'
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Check if sync is needed
      id: check_sync
      run: |
        echo "Checking if translation sync is needed..."
        
        # Check for missing keys by running completeness test
        SYNC_NEEDED="false"
        
        if python -c "
        import json
        from pathlib import Path
        
        def extract_keys(data, prefix=''):
            keys = set()
            for key, value in data.items():
                full_key = f'{prefix}.{key}' if prefix else key
                if isinstance(value, dict):
                    keys.update(extract_keys(value, full_key))
                else:
                    keys.add(full_key)
            return keys
        
        # Load reference (Russian)
        with open('bot/i18n/locales/ru.json', 'r', encoding='utf-8') as f:
            ru_data = json.load(f)
        ru_keys = extract_keys(ru_data)
        
        # Check other languages
        sync_needed = False
        for lang in ['en', 'es']:
            lang_file = Path(f'bot/i18n/locales/{lang}.json')
            if lang_file.exists():
                with open(lang_file, 'r', encoding='utf-8') as f:
                    lang_data = json.load(f)
                lang_keys = extract_keys(lang_data)
                
                missing = ru_keys - lang_keys
                if missing:
                    print(f'{lang.upper()} missing {len(missing)} keys: {list(missing)[:5]}...')
                    sync_needed = True
        
        exit(1 if sync_needed else 0)
        "; then
          echo "All translations are in sync"
          SYNC_NEEDED="false"
        else
          echo "Translation sync is needed"
          SYNC_NEEDED="true"
        fi
        
        # Force sync if requested
        if [ "${{ github.event.inputs.force_sync }}" = "true" ]; then
          echo "Force sync requested"
          SYNC_NEEDED="true"
        fi
        
        echo "sync_needed=$SYNC_NEEDED" >> $GITHUB_OUTPUT
    
    - name: Run translation sync
      if: steps.check_sync.outputs.sync_needed == 'true'
      run: |
        echo "Running translation synchronization..."
        python sync_translations.py
    
    - name: Check for changes
      if: steps.check_sync.outputs.sync_needed == 'true'
      id: check_changes
      run: |
        if git diff --quiet bot/i18n/locales/; then
          echo "No changes made"
          echo "has_changes=false" >> $GITHUB_OUTPUT
        else
          echo "Translation files were updated"
          echo "has_changes=true" >> $GITHUB_OUTPUT
          
          # Show what changed
          echo "Changed files:"
          git diff --name-only bot/i18n/locales/
          
          echo "Summary of changes:"
          git diff --stat bot/i18n/locales/
        fi
    
    - name: Commit and push changes
      if: steps.check_changes.outputs.has_changes == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add only translation files
        git add bot/i18n/locales/*.json
        
        # Create commit message with details
        COMMIT_MSG="🌍 AUTO-SYNC: Update translation structure
        
        - Synchronized translation keys across all languages
        - Added [TO_TRANSLATE] placeholders for missing keys
        - Maintained existing translations
        
        This is an automated commit from translation sync workflow.
        Please review and translate the [TO_TRANSLATE] placeholders.
        
        🤖 Generated by GitHub Action"
        
        git commit -m "$COMMIT_MSG"
        git push origin staging
        
        echo "✅ Translation sync completed and pushed to staging"
    
    - name: Create issue for missing translations
      if: steps.check_changes.outputs.has_changes == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          // Count placeholders in updated files
          const fs = require('fs');
          const path = require('path');
          
          let totalPlaceholders = 0;
          const languageStats = {};
          
          for (const lang of ['en', 'es']) {
            const filePath = `bot/i18n/locales/${lang}.json`;
            if (fs.existsSync(filePath)) {
              const content = fs.readFileSync(filePath, 'utf8');
              const count = (content.match(/\[TO_TRANSLATE\]/g) || []).length;
              totalPlaceholders += count;
              languageStats[lang] = count;
            }
          }
          
          if (totalPlaceholders > 0) {
            const issueBody = `
          ## 🌍 Translation Sync: Missing Translations Detected
          
          The translation synchronization process has detected missing translations that need attention.
          
          ### 📊 Summary
          - **Total placeholders**: ${totalPlaceholders}
          - **Languages affected**: ${Object.keys(languageStats).length}
          
          ### 📋 By Language
          ${Object.entries(languageStats).map(([lang, count]) => 
            `- **${lang.toUpperCase()}**: ${count} missing translations`
          ).join('\n')}
          
          ### 🔍 What are placeholders?
          Placeholders like \`[TO_TRANSLATE] ❌ Ошибка валидации\` indicate that:
          1. A new translation key was added to the Russian (reference) file
          2. The key doesn't exist in other language files
          3. A placeholder was automatically created to prevent application crashes
          
          ### ✅ Action Required
          1. **Review** the affected files: \`bot/i18n/locales/en.json\` and \`bot/i18n/locales/es.json\`
          2. **Search** for \`[TO_TRANSLATE]\` placeholders
          3. **Replace** each placeholder with proper translation:
             \`\`\`json
             // Before:
             "validation": "[TO_TRANSLATE] ❌ Ошибка валидации"
             
             // After:
             "validation": "❌ Validation error"  // English
             "validation": "❌ Error de validación"  // Spanish
             \`\`\`
          4. **Test** translations using: \`pytest tests/test_translation_completeness.py\`
          5. **Commit** and push changes
          
          ### 🚀 Priority
          - **High**: Translation completeness affects user experience
          - **Blocking**: PR merges to main branch are blocked until translations are complete
          
          ---
          *This issue was automatically created by the translation sync workflow.*
          *Commit: ${context.sha.substring(0, 7)}*
            `;
          
            // Check if similar issue already exists
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['translations', 'auto-generated'],
              state: 'open'
            });
            
            if (existingIssues.data.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `🌍 Translation Sync: ${totalPlaceholders} missing translations`,
                body: issueBody,
                labels: ['translations', 'auto-generated', 'help wanted']
              });
              
              console.log('✅ Created issue for missing translations');
            } else {
              console.log('ℹ️ Translation issue already exists, skipping creation');
            }
          }
    
    - name: Update workflow summary
      if: always()
      run: |
        echo "## 🌍 Translation Sync Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.check_sync.outputs.sync_needed }}" = "true" ]; then
          if [ "${{ steps.check_changes.outputs.has_changes }}" = "true" ]; then
            echo "✅ **Sync completed**: Translation files were updated" >> $GITHUB_STEP_SUMMARY
            echo "📝 **Action required**: Review and translate [TO_TRANSLATE] placeholders" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **No changes**: Translation files were already in sync" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "✅ **All good**: No translation sync needed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "1. Review translation files in \`bot/i18n/locales/\`" >> $GITHUB_STEP_SUMMARY
        echo "2. Replace \`[TO_TRANSLATE]\` placeholders with proper translations" >> $GITHUB_STEP_SUMMARY
        echo "3. Run tests: \`pytest tests/test_translation_completeness.py\`" >> $GITHUB_STEP_SUMMARY
        echo "4. Commit and push changes" >> $GITHUB_STEP_SUMMARY