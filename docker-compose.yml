# Docker Compose для Doyobi Diary
# Поддерживает как development, так и production окружения

version: '3.8'

services:
  # Основной Telegram bot
  doyobi-bot:
    build:
      context: .
      dockerfile: Dockerfile
      target: ${DOCKER_TARGET:-development}
    container_name: doyobi-diary-bot
    restart: unless-stopped
    
    environment:
      # Основные переменные (должны быть в .env файле)
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      
      # OpenAI для голосовых сообщений
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      
      # Администратор
      - ADMIN_USER_ID=${ADMIN_USER_ID}
      
      # GitHub для фидбека
      - GITHUB_FEEDBACK_TOKEN=${GITHUB_FEEDBACK_TOKEN}
      - GITHUB_REPO=${GITHUB_REPO:-iegorov553/cerebrate-bot}
      
      # Мониторинг
      - SENTRY_DSN=${SENTRY_DSN}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      
      # Версионирование
      - BOT_VERSION=${BOT_VERSION:-2.1.14}
      - RAILWAY_GIT_COMMIT_SHA=${RAILWAY_GIT_COMMIT_SHA}
      
      # Web App URL
      - WEBAPP_URL=${WEBAPP_URL:-https://doyobi-diary.vercel.app}
      
    volumes:
      # Монтируем код для development (только для dev режима)
      - type: bind
        source: .
        target: /app
        consistency: cached
        bind:
          propagation: rprivate
      
      # Logs
      - ./logs:/app/logs
      
    ports:
      # Health check port (опционально)
      - "8080:8080"
    
    # Health check
    healthcheck:
      test: ["CMD", "python", "-c", "print('Health check passed')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Зависимости (если используются локальные сервисы)
    depends_on:
      - redis
    
    # Сеть
    networks:
      - doyobi-network

  # Redis для кэширования (опционально, для production)
  redis:
    image: redis:7-alpine
    container_name: doyobi-redis
    restart: unless-stopped
    
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    
    volumes:
      - redis_data:/data
    
    ports:
      - "6379:6379"
    
    networks:
      - doyobi-network
    
    # Health check для Redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus для метрик (опционально, для production monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: doyobi-prometheus
    restart: unless-stopped
    
    ports:
      - "9090:9090"
    
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    
    networks:
      - doyobi-network
    
    profiles:
      - monitoring

  # Grafana для визуализации (опционально)
  grafana:
    image: grafana/grafana:latest
    container_name: doyobi-grafana
    restart: unless-stopped
    
    ports:
      - "3000:3000"
    
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    
    volumes:
      - grafana_data:/var/lib/grafana
    
    networks:
      - doyobi-network
    
    profiles:
      - monitoring

# Volumes
volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Networks
networks:
  doyobi-network:
    driver: bridge