"""
Telegram-bot 'Hour Watcher': asks two accounts every hour and writes replies to Supabase.

–î–ª—è Railway, Render, VPS, –ª—é–±–æ–π —Å—Ä–µ–¥—ã –≥–¥–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–¥–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ UI:
- TELEGRAM_BOT_TOKEN
- TARGET_USER_IDS
- SUPABASE_URL
- SUPABASE_SERVICE_ROLE_KEY
"""

from __future__ import annotations

import asyncio
import logging
import os
import re
from datetime import datetime, timezone, time

from supabase import create_client, Client
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from telegram import ForceReply, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram import WebAppInfo
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters,
)


# --- Logging ---
logging.basicConfig(
    format="%(asctime)s | %(levelname)8s | %(name)s: %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# --- Config ---
BOT_TOKEN: str = os.getenv("TELEGRAM_BOT_TOKEN", "")
SUPABASE_URL: str = os.getenv("SUPABASE_URL", "")
SUPABASE_SERVICE_ROLE_KEY: str = os.getenv("SUPABASE_SERVICE_ROLE_KEY", "")

# –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ ADMIN_USER_ID
try:
    ADMIN_USER_ID: int = int(os.getenv("ADMIN_USER_ID", "0"))
except (ValueError, TypeError):
    ADMIN_USER_ID: int = 0
    logger.warning("ADMIN_USER_ID –Ω–µ –∑–∞–¥–∞–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, –∞–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã")

QUESTION: str = "–ß—ë –¥–µ–ª–∞–µ—à—å? ü§î"

if not (BOT_TOKEN and SUPABASE_URL and SUPABASE_SERVICE_ROLE_KEY):
    logger.error("–ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã. –ó–∞–≤–µ—Ä—à–∞—é—Å—å.")
    raise SystemExit(1)

# --- Supabase ---
supabase: Client = create_client(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY)

# --- Cache Manager ---
class CacheManager:
    """–ü—Ä–æ—Å—Ç–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä –∫–µ—à–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π TTL."""
    
    def __init__(self):
        self._cache = {}
        self._cache_timeout = {}
    
    def get(self, key: str, default=None):
        """–ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–µ—à–∞."""
        if key in self._cache:
            if datetime.now() < self._cache_timeout[key]:
                return self._cache[key]
            else:
                # –ö–µ—à –∏—Å—Ç–µ–∫, —É–¥–∞–ª—è–µ–º
                del self._cache[key]
                del self._cache_timeout[key]
        return default
    
    def set(self, key: str, value, timeout_seconds: int = 300):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–µ—à —Å TTL."""
        from datetime import timedelta
        self._cache[key] = value
        self._cache_timeout[key] = datetime.now() + timedelta(seconds=timeout_seconds)
    
    def invalidate(self, key: str):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–µ—à–∞."""
        if key in self._cache:
            del self._cache[key]
        if key in self._cache_timeout:
            del self._cache_timeout[key]
    
    def clear(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫–µ—à."""
        self._cache.clear()
        self._cache_timeout.clear()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–µ—à–∞
cache = CacheManager()

# --- Utility functions ---
def safe_parse_datetime(dt_string: str) -> datetime:
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ datetime —Å—Ç—Ä–æ–∫–∏."""
    try:
        if dt_string:
            return datetime.fromisoformat(dt_string.replace('Z', '+00:00'))
        return None
    except (ValueError, AttributeError, TypeError):
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É: %s", dt_string)
        return None

def validate_time_window(time_range: str) -> tuple[bool, str, time, time]:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞."""
    pattern = r'^([0-2][0-9]):([0-5][0-9])-([0-2][0-9]):([0-5][0-9])$'
    match = re.match(pattern, time_range)
    
    if not match:
        return False, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM-HH:MM", None, None
    
    start_hour, start_min, end_hour, end_min = map(int, match.groups())
    
    if start_hour > 23 or end_hour > 23:
        return False, "–ß–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 00 –¥–æ 23!", None, None
    
    start_time = time(start_hour, start_min)
    end_time = time(end_hour, end_min)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å (–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏)
    if start_time >= end_time:
        return False, "–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞!", None, None
    
    # –ú–∏–Ω–∏–º—É–º 1 —á–∞—Å
    start_minutes = start_hour * 60 + start_min  
    end_minutes = end_hour * 60 + end_min
    
    if end_minutes - start_minutes < 60:
        return False, "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - 1 —á–∞—Å!", None, None
    
    return True, "OK", start_time, end_time

async def get_user_settings_cached(user_id: int, force_refresh: bool = False) -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    cache_key = f"user_settings_{user_id}"
    
    if not force_refresh:
        settings = cache.get(cache_key)
        if settings is not None:
            return settings
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        result = supabase.table("users").select("*").eq("tg_id", user_id).execute()
        settings = result.data[0] if result.data else None
        
        if settings:
            # –ö–µ—à–∏—Ä—É–µ–º –Ω–∞ 5 –º–∏–Ω—É—Ç
            cache.set(cache_key, settings, 300)
            logger.debug("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω—ã", user_id)
        
        return settings
        
    except Exception as exc:
        logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s", user_id, exc)
        return None

def invalidate_user_cache(user_id: int):
    """–û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    cache_key = f"user_settings_{user_id}"
    cache.invalidate(cache_key)
    logger.debug("–ö–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s –æ—á–∏—â–µ–Ω", user_id)

# --- Database functions ---
async def find_user_by_username(username: str) -> dict:
    """Find user by username in database."""
    try:
        # Remove @ if present
        clean_username = username.lstrip('@')
        result = supabase.table("users").select("*").eq("tg_username", clean_username).execute()
        return result.data[0] if result.data else None
    except Exception as exc:
        logger.error("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s", username, exc)
        return None

async def create_friend_request(requester_id: int, addressee_id: int) -> bool:
    """Create a friend request."""
    try:
        # Check if friendship already exists in either direction
        existing1 = supabase.table("friendships").select("*").eq(
            "requester_id", requester_id
        ).eq(
            "addressee_id", addressee_id
        ).execute()
        existing2 = supabase.table("friendships").select("*").eq(
            "requester_id", addressee_id
        ).eq(
            "addressee_id", requester_id
        ).execute()

        if (existing1.data or existing2.data):
            return False  # Already exists
        
        # Create new friend request
        supabase.table("friendships").insert({
            "requester_id": requester_id,
            "addressee_id": addressee_id,
            "status": "pending"
        }).execute()
        
        return True
    except Exception as exc:
        logger.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –≤ –¥—Ä—É–∑—å—è: %s", exc)
        return False

async def get_friend_requests(user_id: int) -> dict:
    """Get incoming and outgoing friend requests."""
    try:
        # Incoming requests (simple query)
        incoming_result = supabase.table("friendships").select(
            "friendship_id, requester_id, addressee_id, status, created_at"
        ).eq("addressee_id", user_id).eq("status", "pending").execute()
        
        # Outgoing requests (simple query)
        outgoing_result = supabase.table("friendships").select(
            "friendship_id, requester_id, addressee_id, status, created_at"
        ).eq("requester_id", user_id).eq("status", "pending").execute()
        
        # Get user info for incoming requests
        incoming = []
        for req in incoming_result.data or []:
            user_info = supabase.table("users").select(
                "tg_username, tg_first_name"
            ).eq("tg_id", req['requester_id']).execute()
            
            if user_info.data:
                req['requester'] = user_info.data[0]
            else:
                req['requester'] = {'tg_username': None, 'tg_first_name': 'Unknown'}
            incoming.append(req)
        
        # Get user info for outgoing requests
        outgoing = []
        for req in outgoing_result.data or []:
            user_info = supabase.table("users").select(
                "tg_username, tg_first_name"
            ).eq("tg_id", req['addressee_id']).execute()
            
            if user_info.data:
                req['addressee'] = user_info.data[0]
            else:
                req['addressee'] = {'tg_username': None, 'tg_first_name': 'Unknown'}
            outgoing.append(req)
        
        return {
            "incoming": incoming,
            "outgoing": outgoing
        }
    except Exception as exc:
        logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥—Ä—É–∑—å—è: %s", exc)
        return {"incoming": [], "outgoing": []}

async def update_friend_request(friendship_id: str, status: str) -> bool:
    """Accept or decline a friend request."""
    try:
        supabase.table("friendships").update({
            "status": status
        }).eq("friendship_id", friendship_id).execute()
        return True
    except Exception as exc:
        logger.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –≤ –¥—Ä—É–∑—å—è: %s", exc)
        return False

async def get_friends_list(user_id: int) -> list:
    """Get list of user's friends."""
    try:
        # Get accepted friendships where user is either requester or addressee
        result_requester = supabase.table("friendships").select(
            "requester_id, addressee_id"
        ).eq("status", "accepted").eq("requester_id", user_id).execute()

        result_addressee = supabase.table("friendships").select(
            "requester_id, addressee_id"
        ).eq("status", "accepted").eq("addressee_id", user_id).execute()

        # Collect friend IDs
        friend_ids = []
        for friendship in result_requester.data or []:
            friend_ids.append(friendship['addressee_id'])
        
        for friendship in result_addressee.data or []:
            friend_ids.append(friendship['requester_id'])

        # Get user info for each friend
        friends = []
        for friend_id in friend_ids:
            user_info = supabase.table("users").select(
                "tg_id, tg_username, tg_first_name"
            ).eq("tg_id", friend_id).execute()
            
            if user_info.data:
                friends.append(user_info.data[0])
        
        return friends
    except Exception as exc:
        logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π: %s", exc)
        return []

async def get_friends_of_friends(user_id: int) -> list:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π –¥—Ä—É–∑–µ–π."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –¥—Ä—É–∑–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        current_friend_ids = []
        
        # –î—Ä—É–∑—å—è –≥–¥–µ user_id - requester
        result1 = supabase.table("friendships").select(
            "addressee_id"
        ).eq("requester_id", user_id).eq("status", "accepted").execute()
        
        # –î—Ä—É–∑—å—è –≥–¥–µ user_id - addressee  
        result2 = supabase.table("friendships").select(
            "requester_id"
        ).eq("addressee_id", user_id).eq("status", "accepted").execute()
        
        for friendship in result1.data or []:
            current_friend_ids.append(friendship['addressee_id'])
        for friendship in result2.data or []:
            current_friend_ids.append(friendship['requester_id'])
        
        if not current_friend_ids:
            return []
        
        exclude_ids = current_friend_ids + [user_id]
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –¥—Ä—É–∑–µ–π –≤—Å–µ—Ö –¥—Ä—É–∑–µ–π –æ–¥–Ω–∏–º –±–æ–ª—å—à–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º .in_() –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        all_friendships = supabase.table("friendships").select(
            "requester_id, addressee_id"
        ).eq("status", "accepted").or_(
            f"requester_id.in.({','.join(map(str, current_friend_ids))}),addressee_id.in.({','.join(map(str, current_friend_ids))})"
        ).execute()
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –≤–∑–∞–∏–º–Ω—ã—Ö –¥—Ä—É–∑–µ–π
        recommendations = {}
        
        for friendship in all_friendships.data or []:
            requester_id = friendship['requester_id']
            addressee_id = friendship['addressee_id']
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ç–æ –∏–∑ –Ω–∏—Ö –¥—Ä—É–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ –∫—Ç–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
            if requester_id in current_friend_ids and addressee_id not in exclude_ids:
                # addressee_id - —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è, requester_id - –≤–∑–∞–∏–º–Ω—ã–π –¥—Ä—É–≥
                candidate_id = addressee_id
                mutual_friend_id = requester_id
            elif addressee_id in current_friend_ids and requester_id not in exclude_ids:
                # requester_id - —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è, addressee_id - –≤–∑–∞–∏–º–Ω—ã–π –¥—Ä—É–≥
                candidate_id = requester_id
                mutual_friend_id = addressee_id
            else:
                continue
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            if candidate_id not in recommendations:
                recommendations[candidate_id] = set()
            recommendations[candidate_id].add(mutual_friend_id)
        
        if not recommendations:
            return []
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        all_user_ids = list(recommendations.keys()) + current_friend_ids
        users_info = supabase.table("users").select(
            "tg_id, tg_username, tg_first_name"
        ).in_("tg_id", all_user_ids).execute()
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        users_map = {user['tg_id']: user for user in users_info.data or []}
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = []
        for candidate_id, mutual_friend_ids in recommendations.items():
            candidate_info = users_map.get(candidate_id)
            if not candidate_info:
                continue
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –≤–∑–∞–∏–º–Ω—ã—Ö –¥—Ä—É–∑–µ–π
            mutual_friends = []
            for mutual_id in mutual_friend_ids:
                mutual_user = users_map.get(mutual_id)
                if mutual_user:
                    mutual_name = mutual_user['tg_username'] or mutual_user['tg_first_name'] or f"ID{mutual_id}"
                    mutual_friends.append(mutual_name)
            
            result.append({
                'user_info': candidate_info,
                'mutual_friends': mutual_friends,
                'mutual_count': len(mutual_friends)
            })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤–∑–∞–∏–º–Ω—ã—Ö –¥—Ä—É–∑–µ–π (—É–±—ã–≤–∞–Ω–∏–µ), –∑–∞—Ç–µ–º –ø–æ –∏–º–µ–Ω–∏
        result.sort(key=lambda x: (
            -x['mutual_count'], 
            (x['user_info']['tg_username'] or x['user_info']['tg_first_name'] or 'zzz_unknown').lower()
        ))
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        return result[:10]
        
    except Exception as exc:
        logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥—Ä—É–∑–µ–π: %s", exc)
        return []

# --- Admin functions ---
def is_admin(user_id: int) -> bool:
    """Check if user is admin."""
    return ADMIN_USER_ID != 0 and user_id == ADMIN_USER_ID

async def get_user_stats() -> dict:
    """Get user statistics for admin panel."""
    try:
        # Total users
        total_result = supabase.table("users").select("tg_id", count="exact").execute()
        total_users = total_result.count
        
        # Active users (enabled=true)
        active_result = supabase.table("users").select("tg_id", count="exact").eq("enabled", True).execute()
        active_users = active_result.count
        
        # New users in last 7 days
        from datetime import datetime, timedelta
        week_ago = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')
        new_result = supabase.table("users").select("tg_id", count="exact").gte("created_at", week_ago).execute()
        new_users = new_result.count
        
        return {
            "total": total_users,
            "active": active_users,
            "new_week": new_users
        }
    except Exception as exc:
        logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %s", exc)
        return {"total": 0, "active": 0, "new_week": 0}

async def send_single_message(app: Application, user_id: int, message_text: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    try:
        await app.bot.send_message(
            chat_id=user_id,
            text=f"üì¢ **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏**\n\n{message_text}",
            parse_mode='Markdown'
        )
        return True
    except Exception as exc:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s: %s", user_id, exc)
        return False

async def send_broadcast_message(app: Application, message_text: str, admin_id: int) -> dict:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –±–∞—Ç—á–∞–º–∏ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º."""
    BATCH_SIZE = 10
    DELAY_BETWEEN_BATCHES = 2.0
    DELAY_BETWEEN_MESSAGES = 0.1
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        result = supabase.table("users").select("tg_id").execute()
        user_ids = [user['tg_id'] for user in result.data or []]
        
        total_users = len(user_ids)
        if total_users == 0:
            await app.bot.send_message(
                chat_id=admin_id,
                text="‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."
            )
            return {"success": 0, "failed": 0, "total": 0}
        
        logger.info("–ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è %s –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", total_users)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        progress_message = await app.bot.send_message(
            chat_id=admin_id,
            text=f"üì° **–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å...**\n\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: 0/{total_users} (0 —É—Å–ø–µ—à–Ω–æ)"
        )
        
        processed = 0
        success_count = 0
        failed_count = 0
        failed_users = []
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –±–∞—Ç—á–∞–º–∏
        for i in range(0, total_users, BATCH_SIZE):
            batch = user_ids[i:i+BATCH_SIZE]
            
            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –±–∞—Ç—á–µ
            tasks = []
            for user_id in batch:
                task = asyncio.create_task(
                    send_single_message(app, user_id, message_text)
                )
                tasks.append((task, user_id))
            
            # –û–∂–∏–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–∞—Ç—á–∞
            for task, user_id in tasks:
                try:
                    result = await task
                    if result:
                        success_count += 1
                    else:
                        failed_count += 1
                        failed_users.append({"user_id": user_id, "error": "Send failed"})
                    
                    processed += 1
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                    await asyncio.sleep(DELAY_BETWEEN_MESSAGES)
                    
                except Exception as exc:
                    failed_count += 1
                    failed_users.append({"user_id": user_id, "error": str(exc)})
                    processed += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–π –±–∞—Ç—á
            try:
                progress_text = f"üì° **–†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...**\n\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {processed}/{total_users} ({success_count} —É—Å–ø–µ—à–Ω–æ, {failed_count} –æ—à–∏–±–æ–∫)"
                await app.bot.edit_message_text(
                    chat_id=admin_id,
                    message_id=progress_message.message_id,
                    text=progress_text,
                    parse_mode='Markdown'
                )
            except Exception:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
            if i + BATCH_SIZE < total_users:
                await asyncio.sleep(DELAY_BETWEEN_BATCHES)
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        summary = f"""üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:**

‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {success_count}
‚ùå –û—à–∏–±–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏: {failed_count}
üì® –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_count/max(total_users, 1)*100:.1f}%

–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"""
        
        try:
            await app.bot.edit_message_text(
                chat_id=admin_id,
                message_id=progress_message.message_id,
                text=summary,
                parse_mode='Markdown'
            )
        except Exception:
            # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await app.bot.send_message(
                    chat_id=admin_id,
                    text=summary,
                    parse_mode='Markdown'
                )
            except Exception:
                pass
        
        logger.info("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: %s —É—Å–ø–µ—à–Ω—ã—Ö, %s –æ—à–∏–±–æ–∫ –∏–∑ %s", success_count, failed_count, total_users)
        
        return {
            "success": success_count,
            "failed": failed_count,
            "total": total_users,
            "failed_users": failed_users
        }
        
    except Exception as exc:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: %s", exc)
        try:
            await app.bot.send_message(
                chat_id=admin_id,
                text=f"‚ùå **–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:** {str(exc)}"
            )
        except Exception:
            pass
        return {"success": 0, "failed": 0, "total": 0, "failed_users": []}

# --- Keyboard generation functions ---
def get_main_menu_keyboard(user_id: int = None) -> InlineKeyboardMarkup:
    """Generate main menu keyboard."""
    keyboard = [
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="menu_settings")],
        [InlineKeyboardButton("üë• –î—Ä—É–∑—å—è", callback_data="menu_friends")],
        [InlineKeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è", callback_data="menu_history")]
    ]
    
    # Add admin panel for admin users
    if user_id and is_admin(user_id):
        keyboard.insert(3, [InlineKeyboardButton("üì¢ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
    
    keyboard.append([InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="menu_help")])
    return InlineKeyboardMarkup(keyboard)

async def get_settings_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """Generate settings menu keyboard with current user data (cached)."""
    try:
        # Get user data from cache
        user_data = await get_user_settings_cached(user_id)
        
        if not user_data:
            return InlineKeyboardMarkup([[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="menu_main")]])
        
        # Format current settings
        status = "–í–ö–õ" if user_data['enabled'] else "–í–´–ö–õ"
        time_window = f"{user_data['window_start'][:5]}-{user_data['window_end'][:5]}"
        frequency = f"{user_data['interval_min']} –º–∏–Ω"
        
        keyboard = [
            [InlineKeyboardButton(f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {status}", callback_data="set_notifications")],
            [InlineKeyboardButton(f"‚è∞ –í—Ä–µ–º—è: {time_window}", callback_data="set_time_window")],
            [InlineKeyboardButton(f"üìä –ß–∞—Å—Ç–æ—Ç–∞: {frequency}", callback_data="set_frequency")],
            [InlineKeyboardButton("üìù –ú–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="set_view_settings")],
            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="menu_main")]
        ]
        return InlineKeyboardMarkup(keyboard)
    except Exception as exc:
        logger.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫: %s", exc)
        return InlineKeyboardMarkup([[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="menu_main")]])

async def get_friends_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """Generate friends menu keyboard."""
    try:
        # Get friend requests count
        requests = await get_friend_requests(user_id)
        incoming_count = len(requests['incoming'])
        
        # Get friends count
        friends = await get_friends_list(user_id)
        friends_count = len(friends)
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∞", callback_data="friend_add")],
            [InlineKeyboardButton(f"üì• –ó–∞–ø—Ä–æ—Å—ã ({incoming_count})", callback_data="friend_requests")],
            [InlineKeyboardButton(f"üë• –ú–æ–∏ –¥—Ä—É–∑—å—è ({friends_count})", callback_data="friend_list")],
            [InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –¥—Ä—É–∑–µ–π", callback_data="friends_discover")],
            [InlineKeyboardButton("üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥—Ä—É–∑–µ–π", callback_data="friend_activities")],
            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="menu_main")]
        ]
        return InlineKeyboardMarkup(keyboard)
    except Exception as exc:
        logger.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥—Ä—É–∑–µ–π: %s", exc)
        return InlineKeyboardMarkup([[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="menu_main")]])

async def get_friend_requests_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """Generate friend requests keyboard with accept/decline buttons."""
    try:
        requests = await get_friend_requests(user_id)
        keyboard = []
        
        # Add buttons for each incoming request
        for req in requests['incoming']:
            requester_username = req['requester']['tg_username']
            requester_name = req['requester']['tg_first_name']
            
            if requester_username:
                display_name = f"@{requester_username}"
                user_identifier = requester_username
            else:
                display_name = requester_name or "Unknown"
                user_identifier = str(req['requester_id'])
            
            # Add row with user name
            keyboard.append([InlineKeyboardButton(f"üë§ {display_name}", callback_data="noop")])
            
            # Add row with accept/decline buttons
            keyboard.append([
                InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"req_accept_{user_identifier}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"req_decline_{user_identifier}")
            ])
        
        if not requests['incoming']:
            keyboard.append([InlineKeyboardButton("üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤", callback_data="noop")])
        
        keyboard.append([InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="menu_friends")])
        return InlineKeyboardMarkup(keyboard)
    except Exception as exc:
        logger.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤: %s", exc)
        return InlineKeyboardMarkup([[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="menu_friends")]])

async def get_admin_panel_keyboard() -> InlineKeyboardMarkup:
    """Generate admin panel keyboard."""
    try:
        stats = await get_user_stats()
        
        keyboard = [
            [InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", callback_data="admin_broadcast")],
            [InlineKeyboardButton(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ({stats['total']} –ø–æ–ª—å–∑.)", callback_data="admin_stats")],
            [InlineKeyboardButton("üìù –¢–µ—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="admin_test")],
            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="menu_main")]
        ]
        return InlineKeyboardMarkup(keyboard)
    except Exception as exc:
        logger.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–¥–º–∏–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: %s", exc)
        return InlineKeyboardMarkup([[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="menu_main")]])

def get_broadcast_confirm_keyboard() -> InlineKeyboardMarkup:
    """Generate broadcast confirmation keyboard."""
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="broadcast_confirm")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="broadcast_cancel")]
    ]
    return InlineKeyboardMarkup(keyboard)

async def get_friends_discovery_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """Generate friends discovery keyboard with recommendations."""
    try:
        recommendations = await get_friends_of_friends(user_id)
        keyboard = []
        
        if not recommendations:
            keyboard.append([InlineKeyboardButton("üòî –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ–∫–∞ –Ω–µ—Ç", callback_data="noop")])
            keyboard.append([InlineKeyboardButton("üí° –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–∑–µ–π, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –±–æ–ª—å—à–µ –ª—é–¥–µ–π!", callback_data="noop")])
        else:
            # Add each recommendation as a separate row
            for i, rec in enumerate(recommendations):
                user_info = rec['user_info']
                mutual_friends = rec['mutual_friends']
                
                # Format display name
                display_name = user_info['tg_username'] or user_info['tg_first_name'] or "Unknown"
                if user_info['tg_username']:
                    display_name = f"@{display_name}"
                
                # Format mutual friends list
                if len(mutual_friends) == 1:
                    mutual_text = f"–û–±—â–∏–π –¥—Ä—É–≥: @{mutual_friends[0]}"
                elif len(mutual_friends) <= 3:
                    mutual_names = [f"@{name}" for name in mutual_friends]
                    mutual_text = f"–û–±—â–∏–µ –¥—Ä—É–∑—å—è: {', '.join(mutual_names)}"
                else:
                    shown = [f"@{name}" for name in mutual_friends[:2]]
                    mutual_text = f"–û–±—â–∏–µ –¥—Ä—É–∑—å—è: {', '.join(shown)} –∏ –µ—â—ë {len(mutual_friends)-2}"
                
                # Add user info row
                keyboard.append([InlineKeyboardButton(f"üë§ {display_name}", callback_data="noop")])
                
                # Add mutual friends info row
                keyboard.append([InlineKeyboardButton(f"   {mutual_text}", callback_data="noop")])
                
                # Add action row
                keyboard.append([InlineKeyboardButton(f"‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –¥—Ä—É–∑—å—è", callback_data=f"discover_add_{user_info['tg_id']}")])
                
                # Add separator for better readability (except for last item)
                if i < len(recommendations) - 1:
                    keyboard.append([InlineKeyboardButton("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ", callback_data="noop")])
        
        # Add summary and back button
        keyboard.append([InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="menu_friends")])
        
        return InlineKeyboardMarkup(keyboard)
        
    except Exception as exc:
        logger.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: %s", exc)
        return InlineKeyboardMarkup([[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="menu_friends")]])

# --- Callback Query Handler ---
async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle inline keyboard button callbacks."""
    query = update.callback_query
    user = update.effective_user
    
    if not user or not query:
        return
    
    await query.answer()  # Answer the callback query
    
    # Ensure user exists
    await ensure_user_exists(
        tg_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    callback_data = query.data
    
    try:
        # Main menu navigation
        if callback_data == "menu_main":
            keyboard = get_main_menu_keyboard(user.id)
            await query.edit_message_text(
                "ü§ñ **Hour Watcher –ë–æ—Ç**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
        
        elif callback_data == "menu_settings":
            keyboard = await get_settings_keyboard(user.id)
            await query.edit_message_text(
                "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
        
        elif callback_data == "menu_friends":
            keyboard = await get_friends_keyboard(user.id)
            await query.edit_message_text(
                "üë• **–î—Ä—É–∑—å—è**\n\n–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—Ä—É–∑—å—è–º–∏ –∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏:",
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
        
        elif callback_data == "menu_history":
            # Open history web app
            web_app_url = "https://doyobi-diary.vercel.app/history"
            keyboard = [[InlineKeyboardButton(
                "üìä –û—Ç–∫—Ä—ã—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π", 
                web_app=WebAppInfo(url=web_app_url)
            )], [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="menu_main")]]
            
            await query.edit_message_text(
                "üîç **–ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π**\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –≤–∞—à–µ–π –ø–æ–ª–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π –æ—Ç–≤–µ—Ç–æ–≤.",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
        
        elif callback_data == "menu_help":
            help_text = """‚ùì **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É**

ü§ñ **Hour Watcher** - –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

**–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
‚Ä¢ –ë–æ—Ç –±—É–¥–µ—Ç —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å "–ß—ë –¥–µ–ª–∞–µ—à—å? ü§î" –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
‚Ä¢ –í—ã –æ—Ç–≤–µ—á–∞–µ—Ç–µ, –∏ –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ú–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å

**–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**
‚Ä¢ ‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã - –∫–æ–≥–¥–∞ –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä 09:00-23:00)
‚Ä¢ üìä –ß–∞—Å—Ç–æ—Ç–∞ - –∫–∞–∫ —á–∞—Å—Ç–æ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä –∫–∞–∂–¥—ã–µ 60 –º–∏–Ω—É—Ç)
‚Ä¢ üîî –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

**–î—Ä—É–∑—å—è:**
‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ —Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∏ –ø—Ä–∏–Ω–∏–º–∞–π—Ç–µ –∑–∞–ø—Ä–æ—Å—ã –≤ –¥—Ä—É–∑—å—è
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
            
            keyboard = [[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="menu_main")]]
            await query.edit_message_text(
                help_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
        
        # Settings callbacks
        elif callback_data == "set_notifications":
            # Toggle notifications
            try:
                user_data = await get_user_settings_cached(user.id)
                current_status = user_data['enabled'] if user_data else True
                new_status = not current_status
                
                supabase.table("users").update({"enabled": new_status}).eq("tg_id", user.id).execute()
                
                # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                invalidate_user_cache(user.id)
                
                status_text = "–≤–∫–ª—é—á–µ–Ω—ã" if new_status else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
                await query.edit_message_text(
                    f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status_text}!",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Üê –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="menu_settings")]])
                )
                logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –∏–∑–º–µ–Ω–∏–ª —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: %s", user.id, new_status)
            except Exception as exc:
                logger.error("–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: %s", exc)
                await query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Üê –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="menu_settings")]])
                )
        
        elif callback_data == "set_time_window":
            await query.edit_message_text(
                "‚è∞ **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏**\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `HH:MM-HH:MM`\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: `09:00-23:00`",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="menu_settings")]]),
                parse_mode='Markdown'
            )
        
        elif callback_data == "set_frequency":
            await query.edit_message_text(
                "üìä **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å—Ç–æ—Ç—ã**\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —á–∞—Å—Ç–æ—Ç—É –≤ –º–∏–Ω—É—Ç–∞—Ö.\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: `60` (–¥–ª—è 60 –º–∏–Ω—É—Ç)\n"
                "–ú–∏–Ω–∏–º—É–º: 5 –º–∏–Ω—É—Ç, –º–∞–∫—Å–∏–º—É–º: 1440 –º–∏–Ω—É—Ç (24 —á–∞—Å–∞)",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="menu_settings")]]),
                parse_mode='Markdown'
            )
        
        elif callback_data == "set_view_settings":
            # Show current settings (same as /settings command)
            try:
                user_data = await get_user_settings_cached(user.id)
                
                if user_data:
                    settings_text = f"""üîß **–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**

‚úÖ –°—Ç–∞—Ç—É—Å: {'–í–∫–ª—é—á–µ–Ω' if user_data['enabled'] else '–û—Ç–∫–ª—é—á–µ–Ω'}
‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {user_data['window_start'][:5]} - {user_data['window_end'][:5]}
üìä –ò–Ω—Ç–µ—Ä–≤–∞–ª: {user_data['interval_min']} –º–∏–Ω—É—Ç
üë§ Telegram ID: {user_data['tg_id']}
üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user_data['created_at'][:10]}"""
                else:
                    settings_text = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫."
                
                await query.edit_message_text(
                    settings_text,
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Üê –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="menu_settings")]]),
                    parse_mode='Markdown'
                )
            except Exception as exc:
                logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: %s", exc)
        
        # Friends callbacks
        elif callback_data == "friend_add":
            await query.edit_message_text(
                "‚ûï **–î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∞**\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ username –¥—Ä—É–≥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `@username`\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: `@john_doe`",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="menu_friends")]]),
                parse_mode='Markdown'
            )
        
        elif callback_data == "friend_requests":
            keyboard = await get_friend_requests_keyboard(user.id)
            await query.edit_message_text(
                "üì• **–ó–∞–ø—Ä–æ—Å—ã –≤ –¥—Ä—É–∑—å—è**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
        
        elif callback_data == "friend_list":
            friends = await get_friends_list(user.id)
            
            if friends:
                message_parts = ["üë• **–í–∞—à–∏ –¥—Ä—É–∑—å—è:**\n"]
                for friend in friends:
                    friend_name = friend['tg_username'] or friend['tg_first_name']
                    message_parts.append(f"‚Ä¢ @{friend_name}")
                message_parts.append(f"\n–í—Å–µ–≥–æ –¥—Ä—É–∑–µ–π: {len(friends)}")
                friends_text = "\n".join(message_parts)
            else:
                friends_text = "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–∑–µ–π.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"–î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∞\" —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–∑–µ–π!"
            
            await query.edit_message_text(
                friends_text,
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="menu_friends")]]),
                parse_mode='Markdown'
            )
        
        elif callback_data == "friend_activities":
            await query.edit_message_text(
                "üìä **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥—Ä—É–∑–µ–π**\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ username –¥—Ä—É–≥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π: `@username`\n"
                "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É \"–ò—Å—Ç–æ—Ä–∏—è\"",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="menu_friends")]]),
                parse_mode='Markdown'
            )
        
        elif callback_data == "friends_discover":
            try:
                recommendations = await get_friends_of_friends(user.id)
                keyboard = await get_friends_discovery_keyboard(user.id)
                
                if not recommendations:
                    message_text = """üîç **–ü–æ–∏—Å–∫ –¥—Ä—É–∑–µ–π**

üòî –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.

üí° –ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –Ω–æ–≤—ã—Ö –¥—Ä—É–∑–µ–π:
‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π
‚Ä¢ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –≤–∞—à–∏ –¥—Ä—É–∑—å—è —Ç–æ–∂–µ –Ω–∞–π–¥—É—Ç –¥—Ä—É–∑–µ–π
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è

–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ—è–≤—è—Ç—Å—è, –∫–æ–≥–¥–∞ —É –≤–∞—à–∏—Ö –¥—Ä—É–∑–µ–π –±—É–¥—É—Ç –æ–±—â–∏–µ –∑–Ω–∞–∫–æ–º—ã–µ!"""
                else:
                    message_text = f"""üîç **–î—Ä—É–∑—å—è –¥—Ä—É–∑–µ–π**

–ù–∞–π–¥–µ–Ω–æ {len(recommendations)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –≤–∞—à–∏—Ö –¥—Ä—É–∑–µ–π:"""
                
                await query.edit_message_text(
                    message_text,
                    reply_markup=keyboard,
                    parse_mode='Markdown'
                )
                logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –æ—Ç–∫—Ä—ã–ª –ø–æ–∏—Å–∫ –¥—Ä—É–∑–µ–π", user.id)
                
            except Exception as exc:
                logger.error("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π –¥–ª—è %s: %s", user.id, exc)
                await query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥—Ä—É–∑–µ–π.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="menu_friends")]])
                )
        
        # Friend request callbacks
        elif callback_data.startswith("req_accept_"):
            user_identifier = callback_data[11:]  # Remove "req_accept_" prefix
            
            # Same logic as accept_command
            try:
                if user_identifier.isdigit():
                    target_user_id = int(user_identifier)
                    target_user = supabase.table("users").select("*").eq("tg_id", target_user_id).execute()
                    target_user = target_user.data[0] if target_user.data else None
                else:
                    target_user = await find_user_by_username(user_identifier)
                
                if not target_user:
                    await query.edit_message_text(
                        "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!",
                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="friend_requests")]])
                    )
                    return
                
                # Find and accept request
                result = supabase.table("friendships").select("*").eq(
                    "addressee_id", user.id
                ).eq("requester_id", target_user['tg_id']).eq("status", "pending").execute()
                
                if result.data:
                    success = await update_friend_request(result.data[0]['friendship_id'], "accepted")
                    
                    if success:
                        # Notify requester
                        try:
                            await context.bot.send_message(
                                chat_id=target_user['tg_id'],
                                text=f"üéâ @{user.username or user.first_name} –ø—Ä–∏–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è!"
                            )
                        except Exception:
                            pass
                        
                        await query.edit_message_text(
                            f"‚úÖ –í—ã —Ç–µ–ø–µ—Ä—å –¥—Ä—É–∑—å—è —Å @{target_user['tg_username'] or target_user['tg_first_name']}! üéâ",
                            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Üê –ö –∑–∞–ø—Ä–æ—Å–∞–º", callback_data="friend_requests")]])
                        )
                        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –ø—Ä–∏–Ω—è–ª –∑–∞–ø—Ä–æ—Å –æ—Ç %s", user.id, target_user['tg_id'])
                    else:
                        await query.edit_message_text(
                            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–ø—Ä–æ—Å–∞.",
                            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="friend_requests")]])
                        )
                else:
                    await query.edit_message_text(
                        "‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!",
                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="friend_requests")]])
                    )
            except Exception as exc:
                logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–ø—Ä–æ—Å–∞: %s", exc)
                await query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–ø—Ä–æ—Å–∞.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="friend_requests")]])
                )
        
        elif callback_data.startswith("req_decline_"):
            user_identifier = callback_data[12:]  # Remove "req_decline_" prefix
            
            # Same logic as decline_command
            try:
                if user_identifier.isdigit():
                    target_user_id = int(user_identifier)
                    target_user = supabase.table("users").select("*").eq("tg_id", target_user_id).execute()
                    target_user = target_user.data[0] if target_user.data else None
                else:
                    target_user = await find_user_by_username(user_identifier)
                
                if not target_user:
                    await query.edit_message_text(
                        "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!",
                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="friend_requests")]])
                    )
                    return
                
                # Find and delete request
                result = supabase.table("friendships").select("*").eq(
                    "addressee_id", user.id
                ).eq("requester_id", target_user['tg_id']).eq("status", "pending").execute()
                
                if result.data:
                    supabase.table("friendships").delete().eq(
                        "friendship_id", result.data[0]['friendship_id']
                    ).execute()
                    
                    await query.edit_message_text(
                        "‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω.",
                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Üê –ö –∑–∞–ø—Ä–æ—Å–∞–º", callback_data="friend_requests")]])
                    )
                    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞–ø—Ä–æ—Å –æ—Ç %s", user.id, target_user['tg_id'])
                else:
                    await query.edit_message_text(
                        "‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!",
                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="friend_requests")]])
                    )
            except Exception as exc:
                logger.error("–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %s", exc)
                await query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="friend_requests")]])
                )
        
        # Friend discovery callbacks
        elif callback_data.startswith("discover_add_"):
            target_user_id = int(callback_data[13:])  # Remove "discover_add_" prefix
            
            try:
                # Get target user info
                target_user_result = supabase.table("users").select("*").eq("tg_id", target_user_id).execute()
                target_user = target_user_result.data[0] if target_user_result.data else None
                
                if not target_user:
                    await query.edit_message_text(
                        "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!",
                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Üê –ö –ø–æ–∏—Å–∫—É", callback_data="friends_discover")]])
                    )
                    return
                
                # Create friend request
                success = await create_friend_request(user.id, target_user_id)
                
                if success:
                    # Try to notify the target user
                    try:
                        await context.bot.send_message(
                            chat_id=target_user_id,
                            text=f"ü§ù –£ –≤–∞—Å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è –æ—Ç @{user.username or user.first_name}!\n\n"
                                 f"–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (–∫–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è):\n"
                                 f"‚úÖ `/accept @{user.username or user.first_name}`\n"
                                 f"‚ùå `/decline @{user.username or user.first_name}`\n\n"
                                 f"–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/friend_requests` –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.",
                            parse_mode='Markdown'
                        )
                    except Exception:
                        pass  # User might have blocked the bot
                    
                    target_name = target_user['tg_username'] or target_user['tg_first_name']
                    await query.edit_message_text(
                        f"‚úÖ –ó–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{target_name}!\n\n"
                        f"–û–Ω–∏ –ø–æ–ª—É—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ —Å–º–æ–≥—É—Ç –ø—Ä–∏–Ω—è—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å.",
                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Üê –ö –ø–æ–∏—Å–∫—É", callback_data="friends_discover")]])
                    )
                    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å –∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s", user.id, target_user_id)
                else:
                    await query.edit_message_text(
                        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å!\n"
                        f"–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —É–∂–µ –¥—Ä—É–∑—å—è –∏–ª–∏ –∑–∞–ø—Ä–æ—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Üê –ö –ø–æ–∏—Å–∫—É", callback_data="friends_discover")]])
                    )
                    
            except Exception as exc:
                logger.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: %s", exc)
                await query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Üê –ö –ø–æ–∏—Å–∫—É", callback_data="friends_discover")]])
                )
        
        # Admin panel callbacks (only for admin)
        elif callback_data == "admin_panel":
            if not is_admin(user.id):
                await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")
                return
            
            keyboard = await get_admin_panel_keyboard()
            await query.edit_message_text(
                "üì¢ **–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            logger.info("–ê–¥–º–∏–Ω %s –æ—Ç–∫—Ä—ã–ª –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", user.id)
        
        elif callback_data == "admin_broadcast":
            if not is_admin(user.id):
                await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
                return
            
            await query.edit_message_text(
                "üì¢ **–†–∞—Å—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è**\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Markdown –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n\n"
                "–ü—Ä–∏–º–µ—Ä: `–í—ã—à–ª–æ –Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ! üéâ`",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="admin_panel")]]),
                parse_mode='Markdown'
            )
        
        elif callback_data == "admin_stats":
            if not is_admin(user.id):
                await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
                return
            
            try:
                stats = await get_user_stats()
                
                stats_text = f"""üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total']}
‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['active']}
üÜï –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {stats['new_week']}

üìà –ü—Ä–æ—Ü–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active']/max(stats['total'], 1)*100:.1f}% (–∏–∑ {stats['total']})"""
                
                await query.edit_message_text(
                    stats_text,
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="admin_panel")]]),
                    parse_mode='Markdown'
                )
                logger.info("–ê–¥–º–∏–Ω %s –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", user.id)
                
            except Exception as exc:
                logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: %s", exc)
                await query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="admin_panel")]])
                )
        
        elif callback_data == "admin_test":
            if not is_admin(user.id):
                await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
                return
            
            # Send test message to admin
            test_message = """üì¢ **–¢–µ—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏**

–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

‚ú® –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å **Markdown** –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
‚Ä¢ –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
‚Ä¢ *–ö—É—Ä—Å–∏–≤*
‚Ä¢ `–ö–æ–¥`

üéâ –í—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!"""
            
            try:
                await context.bot.send_message(
                    chat_id=user.id,
                    text=f"üì¢ **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏**\n\n{test_message}",
                    parse_mode='Markdown'
                )
                
                await query.edit_message_text(
                    "‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–∞–º –≤ —á–∞—Ç!",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="admin_panel")]])
                )
                logger.info("–ê–¥–º–∏–Ω %s –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª —Ä–∞—Å—Å—ã–ª–∫—É", user.id)
                
            except Exception as exc:
                logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: %s", exc)
                await query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="admin_panel")]])
                )
        
        elif callback_data == "broadcast_confirm":
            if not is_admin(user.id):
                await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
                return
            
            message_text = context.user_data.get('broadcast_message')
            if not message_text:
                await query.edit_message_text(
                    "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="admin_panel")]])
                )
                return
            
            await query.edit_message_text(
                "üì° **–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å...**\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
                reply_markup=None
            )
            
            # Start broadcast in background
            import asyncio
            asyncio.create_task(send_broadcast_message(context.application, message_text, user.id))
            
            # Clear stored message
            context.user_data.pop('broadcast_message', None)
            logger.info("–ê–¥–º–∏–Ω %s –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Ä–∞—Å—Å—ã–ª–∫—É", user.id)
        
        elif callback_data == "broadcast_cancel":
            if not is_admin(user.id):
                await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
                return
            
            # Clear stored message
            context.user_data.pop('broadcast_message', None)
            
            await query.edit_message_text(
                "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Üê –ö –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏", callback_data="admin_panel")]])
            )
            logger.info("–ê–¥–º–∏–Ω %s –æ—Ç–º–µ–Ω–∏–ª —Ä–∞—Å—Å—ã–ª–∫—É", user.id)
        
        elif callback_data == "noop":
            # Do nothing for informational buttons
            pass
        
        else:
            # Unknown callback
            await query.edit_message_text(
                "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Üê –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main")]])
            )
            
    except Exception as exc:
        logger.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: %s", exc)
        try:
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Üê –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main")]])
            )
        except Exception:
            pass

async def ensure_user_exists(tg_id: int, username: str = None, first_name: str = None, last_name: str = None) -> dict:
    """Ensure user exists in database, create if not."""
    try:
        # Check if user exists
        result = supabase.table("users").select("*").eq("tg_id", tg_id).execute()
        
        if result.data:
            return result.data[0]
        
        # Create new user with default settings
        new_user = {
            "tg_id": tg_id,
            "tg_username": username,
            "tg_first_name": first_name,
            "tg_last_name": last_name,
            "enabled": True,
            "window_start": "09:00:00",
            "window_end": "23:00:00",
            "interval_min": 60
        }
        
        result = supabase.table("users").insert(new_user).execute()
        logger.info("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s", tg_id)
        return result.data[0]
    
    except Exception as exc:
        logger.error("–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º %s: %s", tg_id, exc)
        return None

# --- Telegram callbacks ---
async def ask_question(app: Application) -> None:
    """Ask the question to all active users based on their individual intervals."""
    try:
        # Get all enabled users
        result = supabase.table("users").select("*").eq("enabled", True).execute()
        current_time = datetime.now()
        
        for user in result.data:
            # Check if user is within their time window
            user_start = datetime.strptime(user['window_start'], '%H:%M:%S').time()
            user_end = datetime.strptime(user['window_end'], '%H:%M:%S').time()
            current_time_only = current_time.time()
            
            if not (user_start <= current_time_only <= user_end):
                continue
            
            # Check if enough time has passed since last notification
            last_sent = user.get('last_notification_sent')
            interval_minutes = user.get('interval_min', 60)
            
            should_send = False
            if last_sent is None:
                # First time sending to this user
                should_send = True
            else:
                # Parse last sent time and check interval using safe parser
                last_sent_dt = safe_parse_datetime(last_sent)
                if last_sent_dt is None:
                    # If parsing failed, assume we should send
                    should_send = True
                else:
                    time_diff = current_time - last_sent_dt.replace(tzinfo=None)
                    if time_diff.total_seconds() >= (interval_minutes * 60):
                        should_send = True
            
            if should_send:
                try:
                    await app.bot.send_message(
                        chat_id=user['tg_id'], 
                        text=QUESTION, 
                        reply_markup=ForceReply()
                    )
                    
                    # Update last notification time
                    supabase.table("users").update({
                        "last_notification_sent": current_time.isoformat()
                    }).eq("tg_id", user['tg_id']).execute()
                    
                    logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s (–∏–Ω—Ç–µ—Ä–≤–∞–ª: %s –º–∏–Ω)", 
                              user['tg_id'], interval_minutes)
                except Exception as exc:
                    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ %s: %s", user['tg_id'], exc)
    
    except Exception as exc:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–æ–≤: %s", exc)

async def handle_reply(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    if user is None:
        return

    # Ensure user exists in database
    await ensure_user_exists(
        tg_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )

    text = update.effective_message.text or "<–±–µ–∑ —Ç–µ–∫—Å—Ç–∞>"
    timestamp = datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M:%S')

    try:
        data = {
            "tg_name": user.username or user.full_name,
            "tg_id": user.id,
            "jobs_timestamp": timestamp,
            "job_text": text
        }
        supabase.table("tg_jobs").insert(data).execute()
        logger.info("–ó–∞–ø–∏—Å–∞–Ω –æ—Ç–≤–µ—Ç –æ—Ç %s", user.id)
        
        # Send confirmation message
        await update.message.reply_text("–ü–æ–Ω—è–ª, –ø—Ä–∏–Ω—è–ª! üëç")
        
    except Exception as exc:
        logger.error("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Supabase: %s", exc)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle /start command - register user and show main menu."""
    user = update.effective_user
    if user is None:
        return

    # Ensure user exists in database
    user_data = await ensure_user_exists(
        tg_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )

    if not user_data:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    # Welcome message with main menu
    welcome_text = f"""ü§ñ **–ü—Ä–∏–≤–µ—Ç, {user.first_name or user.username or '–¥—Ä—É–≥'}!**

–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–≤–æ—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å! üìä

üïê –ë—É–¥—É —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å —á—Ç–æ —Ç—ã –¥–µ–ª–∞–µ—à—å –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π –≤—Ä–µ–º—è –∏ —á–∞—Å—Ç–æ—Ç—É –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
üì± –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π –∏—Å—Ç–æ—Ä–∏—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
üë• –î–æ–±–∞–≤–ª—è–π –¥—Ä—É–∑–µ–π –∏ —Å–º–æ—Ç—Ä–∏ –∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"""

    keyboard = get_main_menu_keyboard(user.id)
    await update.message.reply_text(
        welcome_text, 
        reply_markup=keyboard,
        parse_mode='Markdown'
    )
    
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –æ—Ç–∫—Ä—ã–ª –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", user.id)

async def settings_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show user settings from database."""
    user = update.effective_user
    if user is None:
        return

    # Ensure user exists
    await ensure_user_exists(
        tg_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )

    # Get settings from cache
    user_data = await get_user_settings_cached(user.id)
    
    if not user_data:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
        return

    settings_text = f"""üîß **–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**

‚úÖ –°—Ç–∞—Ç—É—Å: {'–í–∫–ª—é—á–µ–Ω' if user_data['enabled'] else '–û—Ç–∫–ª—é—á–µ–Ω'}
‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {user_data['window_start'][:5]} - {user_data['window_end'][:5]}
üìä –ò–Ω—Ç–µ—Ä–≤–∞–ª: {user_data['interval_min']} –º–∏–Ω—É—Ç
üë§ Telegram ID: {user_data['tg_id']}
üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user_data['created_at'][:10]}"""

    await update.message.reply_text(settings_text, parse_mode='Markdown')

async def notify_on_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Enable notifications for user."""
    user = update.effective_user
    if user is None:
        return

    try:
        # Ensure user exists and update enabled status
        await ensure_user_exists(
            tg_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        supabase.table("users").update({"enabled": True}).eq("tg_id", user.id).execute()
        
        # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        invalidate_user_cache(user.id)
        
        await update.message.reply_text("‚úÖ –û–ø–æ–≤–µ—â–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!")
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤–∫–ª—é—á–∏–ª –æ–ø–æ–≤–µ—â–µ–Ω–∏—è", user.id)
    except Exception as exc:
        logger.error("–û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –¥–ª—è %s: %s", user.id, exc)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π.")

async def notify_off_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Disable notifications for user."""
    user = update.effective_user
    if user is None:
        return

    try:
        # Ensure user exists and update enabled status
        await ensure_user_exists(
            tg_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        supabase.table("users").update({"enabled": False}).eq("tg_id", user.id).execute()
        
        # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        invalidate_user_cache(user.id)
        
        await update.message.reply_text("‚ùå –û–ø–æ–≤–µ—â–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.")
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –æ—Ç–∫–ª—é—á–∏–ª –æ–ø–æ–≤–µ—â–µ–Ω–∏—è", user.id)
    except Exception as exc:
        logger.error("–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –¥–ª—è %s: %s", user.id, exc)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π.")

async def window_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Set user time window for notifications. Format: /window HH:MM-HH:MM"""
    user = update.effective_user
    if user is None:
        return

    if not context.args or len(context.args) != 1:
        await update.message.reply_text(
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n"
            "–ü—Ä–∏–º–µ—Ä: `/window 09:00-23:00`", 
            parse_mode='Markdown'
        )
        return

    time_range = context.args[0]
    
    # Use improved validation function
    is_valid, error_message, start_time, end_time = validate_time_window(time_range)
    
    if not is_valid:
        await update.message.reply_text(
            f"‚ùå {error_message}\n"
            "–ü—Ä–∏–º–µ—Ä: `/window 09:00-23:00`",
            parse_mode='Markdown'
        )
        return
    
    try:
        # Ensure user exists and update time window
        await ensure_user_exists(
            tg_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        supabase.table("users").update({
            "window_start": start_time.strftime('%H:%M:%S'),
            "window_end": end_time.strftime('%H:%M:%S')
        }).eq("tg_id", user.id).execute()
        
        # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        invalidate_user_cache(user.id)
        
        await update.message.reply_text(
            f"‚úÖ –í—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n"
            f"‚è∞ {start_time.strftime('%H:%M')} - {end_time.strftime('%H:%M')}"
        )
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s —É—Å—Ç–∞–Ω–æ–≤–∏–ª –≤—Ä–µ–º—è: %s-%s", user.id, start_time, end_time)
    
    except Exception as exc:
        logger.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è %s: %s", user.id, exc)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏.")

async def freq_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Set user notification frequency in minutes. Format: /freq N"""
    user = update.effective_user
    if user is None:
        return

    if not context.args or len(context.args) != 1:
        await update.message.reply_text(
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n"
            "–ü—Ä–∏–º–µ—Ä: `/freq 60` (–¥–ª—è 60 –º–∏–Ω—É—Ç)",
            parse_mode='Markdown'
        )
        return

    try:
        interval_min = int(context.args[0])
        
        # Validate interval (minimum 5 minutes, maximum 24 hours)
        if interval_min < 5:
            await update.message.reply_text("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª - 5 –º–∏–Ω—É—Ç!")
            return
        
        if interval_min > 1440:  # 24 hours
            await update.message.reply_text("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª - 1440 –º–∏–Ω—É—Ç (24 —á–∞—Å–∞)!")
            return
        
        # Ensure user exists and update interval
        await ensure_user_exists(
            tg_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        supabase.table("users").update({
            "interval_min": interval_min
        }).eq("tg_id", user.id).execute()
        
        # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        invalidate_user_cache(user.id)
        
        # Convert to human readable format
        if interval_min >= 60:
            hours = interval_min // 60
            minutes = interval_min % 60
            if minutes == 0:
                interval_text = f"{hours} —á–∞—Å(–æ–≤)"
            else:
                interval_text = f"{hours} —á–∞—Å(–æ–≤) {minutes} –º–∏–Ω—É—Ç"
        else:
            interval_text = f"{interval_min} –º–∏–Ω—É—Ç"
        
        await update.message.reply_text(
            f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª—ë–Ω!\n"
            f"üìä –ö–∞–∂–¥—ã–µ {interval_text}"
        )
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s —É—Å—Ç–∞–Ω–æ–≤–∏–ª –∏–Ω—Ç–µ—Ä–≤–∞–ª: %s –º–∏–Ω—É—Ç", user.id, interval_min)
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —á–∏—Å–ª–æ!")
    except Exception as exc:
        logger.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è %s: %s", user.id, exc)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞.")

async def history_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Open history page in Telegram Web App."""
    user = update.effective_user
    if user is None:
        return
    
    # Ensure user exists
    await ensure_user_exists(
        tg_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    # Web App URL for Vercel deployment
    web_app_url = "https://doyobi-diary.vercel.app/history"
    
    keyboard = [[InlineKeyboardButton(
        "üìä –û—Ç–∫—Ä—ã—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π", 
        web_app=WebAppInfo(url=web_app_url)
    )]]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üîç **–ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π**\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –≤–∞—à–µ–π –ø–æ–ª–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π –æ—Ç–≤–µ—Ç–æ–≤. "
        "–í—ã —Å–º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ üìÖ –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –¥–∞—Ç–∞–º\n"
        "‚Ä¢ üîç –ò—Å–∫–∞—Ç—å –ø–æ —Ç–µ–∫—Å—Ç—É\n"
        "‚Ä¢ üìä –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "‚Ä¢ üìà –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –æ—Ç–∫—Ä—ã–ª –∏—Å—Ç–æ—Ä–∏—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π", user.id)

async def add_friend_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Add a friend by username. Format: /add_friend @username"""
    user = update.effective_user
    if user is None:
        return

    if not context.args or len(context.args) != 1:
        await update.message.reply_text(
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n"
            "–ü—Ä–∏–º–µ—Ä: `/add_friend @username`",
            parse_mode='Markdown'
        )
        return
    
    username = context.args[0]
    
    # Ensure current user exists
    await ensure_user_exists(
        tg_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    # Find the target user
    target_user = await find_user_by_username(username)
    if not target_user:
        await update.message.reply_text(
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω!\n"
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –±–æ—Ç–∞."
        )
        return
    
    # Check if trying to add themselves
    if target_user['tg_id'] == user.id:
        await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–±—è –≤ –¥—Ä—É–∑—å—è! üòÑ")
        return
    
    # Create friend request
    success = await create_friend_request(user.id, target_user['tg_id'])
    
    if success:
        # Try to notify the target user
        try:
            await context.bot.send_message(
                chat_id=target_user['tg_id'],
                text=f"ü§ù –£ –≤–∞—Å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è –æ—Ç @{user.username or user.first_name}!\n\n"
                     f"–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (–∫–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è):\n"
                     f"‚úÖ `/accept @{user.username or user.first_name}`\n"
                     f"‚ùå `/decline @{user.username or user.first_name}`\n\n"
                     f"–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/friend_requests` –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.",
                parse_mode='Markdown'
            )
        except Exception:
            pass  # User might have blocked the bot
        
        await update.message.reply_text(
            f"‚úÖ –ó–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}!"
        )
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è %s", user.id, target_user['tg_id'])
    else:
        await update.message.reply_text(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å!\n"
            f"–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —É–∂–µ –¥—Ä—É–∑—å—è –∏–ª–∏ –∑–∞–ø—Ä–æ—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
        )

async def friend_requests_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show incoming and outgoing friend requests."""
    user = update.effective_user
    if user is None:
        return
    
    # Ensure user exists
    await ensure_user_exists(
        tg_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    requests = await get_friend_requests(user.id)
    
    # Build response message
    message_parts = ["ü§ù –ó–∞–ø—Ä–æ—Å—ã –≤ –¥—Ä—É–∑—å—è:\n"]
    
    # Incoming requests
    if requests['incoming']:
        message_parts.append("üì• –í—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã:")
        message_parts.append("–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ü–µ–ª–∏–∫–æ–º –∫–ª–∏–∫–Ω—É–≤ –Ω–∞ –Ω–µ—ë: \n")
        for i, req in enumerate(requests['incoming'], 1):
            requester_username = req['requester']['tg_username']
            requester_name = req['requester']['tg_first_name']
            
            if requester_username:
                display_name = f"@{requester_username}"
                accept_cmd = f"`/accept @{requester_username}`"
                decline_cmd = f"`/decline @{requester_username}`"
            else:
                display_name = requester_name or "Unknown"
                # Fallback to ID if no username
                short_id = req['friendship_id'][:8]
                accept_cmd = f"`/accept {short_id}`"
                decline_cmd = f"`/decline {short_id}`"
            
            message_parts.append(f"{i}. {display_name}")
            message_parts.append(f"   ‚úÖ {accept_cmd}")
            message_parts.append(f"   ‚ùå {decline_cmd}")
            message_parts.append("")
    
    # Outgoing requests
    if requests['outgoing']:
        message_parts.append("üì§ –ò—Å—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã:")
        for req in requests['outgoing']:
            addressee_name = req['addressee']['tg_username'] or req['addressee']['tg_first_name']
            message_parts.append(f"‚Ä¢ @{addressee_name} (–æ–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞)")
        message_parts.append("")
    
    if not requests['incoming'] and not requests['outgoing']:
        message_parts.append("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥—Ä—É–∑—å—è.")
    
    await update.message.reply_text(
        "\n".join(message_parts),
        parse_mode='Markdown'
    )

async def accept_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Accept a friend request. Format: /accept [request_id]"""
    user = update.effective_user
    if user is None:
        return

    if not context.args or len(context.args) != 1:
        await update.message.reply_text(
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n\n"
            "–ß—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è:\n"
            "1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/friend_requests` —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø—Ä–æ—Å—ã\n"
            "2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/accept` –∏–∑ —Å–ø–∏—Å–∫–∞\n"
            "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/accept @username` –∏–ª–∏ `/accept username`",
            parse_mode='Markdown'
        )
        return
    
    identifier = context.args[0]
    
    try:
        # Check if it's a username (starts with @) or an ID
        if identifier.startswith('@') or not identifier.isdigit():
            # Find user by username (remove @ if present)
            username = identifier[1:] if identifier.startswith('@') else identifier
            target_user = await find_user_by_username(username)
            if not target_user:
                await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            
            # Find friendship by requester_id
            result = supabase.table("friendships").select("*").eq(
                "addressee_id", user.id
            ).eq("requester_id", target_user['tg_id']).eq("status", "pending").execute()
            
            matching_request = result.data[0] if result.data else None
        else:
            # Old method with ID
            result = supabase.table("friendships").select("*").eq(
                "addressee_id", user.id
            ).eq("status", "pending").execute()
            
            matching_request = None
            for req in result.data or []:
                if req['friendship_id'].startswith(identifier):
                    matching_request = req
                    break
        
        if not matching_request:
            await update.message.reply_text("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
            
        # Accept the request
        success = await update_friend_request(matching_request['friendship_id'], "accepted")
        
        if success:
            # Get requester info
            requester = supabase.table("users").select("*").eq(
                "tg_id", matching_request['requester_id']
            ).execute()
            
            if requester.data:
                requester_name = requester.data[0]['tg_username'] or requester.data[0]['tg_first_name']
                
                # Notify the requester
                try:
                    await context.bot.send_message(
                        chat_id=matching_request['requester_id'],
                        text=f"üéâ @{user.username or user.first_name} –ø—Ä–∏–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è!\n"
                             f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥—Ä—É–≥ –¥—Ä—É–≥–∞ —á–µ—Ä–µ–∑ /activities"
                    )
                except Exception:
                    pass
                
                await update.message.reply_text(
                    f"‚úÖ –í—ã —Ç–µ–ø–µ—Ä—å –¥—Ä—É–∑—å—è —Å @{requester_name}! üéâ"
                )
                logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –ø—Ä–∏–Ω—è–ª –∑–∞–ø—Ä–æ—Å –æ—Ç %s", user.id, matching_request['requester_id'])
            else:
                await update.message.reply_text("‚úÖ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç!")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–ø—Ä–æ—Å–∞.")
            
    except Exception as exc:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: %s", exc)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–ø—Ä–æ—Å–∞.")

async def decline_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Decline a friend request. Format: /decline [request_id]"""
    user = update.effective_user
    if user is None:
        return

    if not context.args or len(context.args) != 1:
        await update.message.reply_text(
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n\n"
            "–ß—Ç–æ–±—ã –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è:\n"
            "1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/friend_requests` —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø—Ä–æ—Å—ã\n"
            "2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/decline` –∏–∑ —Å–ø–∏—Å–∫–∞\n"
            "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/decline @username`",
            parse_mode='Markdown'
        )
        return
    
    identifier = context.args[0]
    
    # Find and delete the request
    try:
        # Check if it's a username (starts with @) or an ID
        if identifier.startswith('@') or not identifier.isdigit():
            # Find user by username (remove @ if present)
            username = identifier[1:] if identifier.startswith('@') else identifier
            target_user = await find_user_by_username(username)
            if not target_user:
                await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            
            # Find friendship by requester_id
            result = supabase.table("friendships").select("*").eq(
                "addressee_id", user.id
            ).eq("requester_id", target_user['tg_id']).eq("status", "pending").execute()
            
            matching_request = result.data[0] if result.data else None
        else:
            # Old method with ID
            result = supabase.table("friendships").select("*").eq(
                "addressee_id", user.id
            ).eq("status", "pending").execute()
            
            matching_request = None
            for req in result.data or []:
                if req['friendship_id'].startswith(identifier):
                    matching_request = req
                    break
        
        if not matching_request:
            await update.message.reply_text("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # Delete the request
        supabase.table("friendships").delete().eq(
            "friendship_id", matching_request['friendship_id']
        ).execute()
        
        await update.message.reply_text("‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞–ø—Ä–æ—Å –æ—Ç %s", user.id, matching_request['requester_id'])
            
    except Exception as exc:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: %s", exc)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞.")

async def friends_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show list of friends."""
    user = update.effective_user
    if user is None:
        return
    
    # Ensure user exists
    await ensure_user_exists(
        tg_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    friends = await get_friends_list(user.id)
    
    if not friends:
        await update.message.reply_text(
            "üë• –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–∑–µ–π.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_friend @username —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–∑–µ–π!"
        )
        return
    
    message_parts = ["üë• –í–∞—à–∏ –¥—Ä—É–∑—å—è:\n"]
    
    for friend in friends:
        friend_name = friend['tg_username'] or friend['tg_first_name']
        message_parts.append(f"‚Ä¢ @{friend_name}")
    
    message_parts.extend([
        "",
        f"–í—Å–µ–≥–æ –¥—Ä—É–∑–µ–π: {len(friends)}",
        "",
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /activities @username —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥—Ä—É–≥–∞!"
    ])
    
    await update.message.reply_text(
        "\n".join(message_parts)
    )

async def activities_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show activities of self or a friend. Format: /activities [@username]"""
    user = update.effective_user
    if user is None:
        return
    
    # Ensure user exists
    await ensure_user_exists(
        tg_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    # If no username provided, show own activities via web interface
    if not context.args:
        # Redirect to history command for own activities
        await history_command(update, context)
        return
    
    target_username = context.args[0]
    
    # Find target user
    target_user = await find_user_by_username(target_username)
    if not target_user:
        await update.message.reply_text(
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_username} –Ω–µ –Ω–∞–π–¥–µ–Ω!\n"
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –±–æ—Ç–∞."
        )
        return
    
    # Check if they are friends
    friends = await get_friends_list(user.id)
    is_friend = any(friend['tg_id'] == target_user['tg_id'] for friend in friends)
    
    if not is_friend and target_user['tg_id'] != user.id:
        await update.message.reply_text(
            f"üîí –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ @{target_username}.\n"
            f"–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –≤ –¥—Ä—É–∑—å—è: /add_friend {target_username}"
        )
        return
    
    # Get recent activities
    try:
        # Get last 10 activities from the last week
        from datetime import datetime, timedelta
        week_ago = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d %H:%M:%S')
        
        result = supabase.table("tg_jobs").select("*").eq(
            "tg_id", target_user['tg_id']
        ).gte(
            "jobs_timestamp", week_ago
        ).order(
            "jobs_timestamp", desc=True
        ).limit(10).execute()
        
        activities = result.data or []
        
        if not activities:
            target_name = target_user['tg_username'] or target_user['tg_first_name']
            await update.message.reply_text(
                f"üìù –£ @{target_name} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é."
            )
            return
        
        # Format response
        target_name = target_user['tg_username'] or target_user['tg_first_name']
        message_parts = [f"üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ @{target_name} (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):\n"]
        
        for activity in activities:
            # Format timestamp
            timestamp = datetime.fromisoformat(activity['jobs_timestamp'].replace('Z', '+00:00'))
            formatted_time = timestamp.strftime('%d.%m %H:%M')
            
            # Truncate long messages
            text = activity['job_text']
            if len(text) > 100:
                text = text[:97] + "..."
            
            message_parts.append(f"‚Ä¢ {formatted_time}: {text}")
        
        message_parts.extend([
            "",
            f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é: {len(activities)}",
            "",
            "üåê –ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ /history –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ"
        ])
        
        await update.message.reply_text(
            "\n".join(message_parts)
        )
        
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ %s", user.id, target_user['tg_id'])
        
    except Exception as exc:
        logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π: %s", exc)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π.")

async def broadcast_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send broadcast message to all users (admin only)."""
    user = update.effective_user
    if not user or not is_admin(user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if not context.args:
        await update.message.reply_text(
            "üì¢ **–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è**\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/broadcast <—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>`\n"
            "–ü—Ä–∏–º–µ—Ä: `/broadcast –í—ã—à–ª–æ –Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ!`",
            parse_mode='Markdown'
        )
        return
    
    # Get full message text preserving line breaks
    full_text = update.message.text
    command_start = full_text.find('/broadcast') + len('/broadcast')
    message_text = full_text[command_start:].strip()
    
    # Show preview and confirmation
    preview_text = f"""üì¢ **–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏:**

{message_text}

‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ!** –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞.
–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"""
    
    keyboard = get_broadcast_confirm_keyboard()
    await update.message.reply_text(
        preview_text,
        reply_markup=keyboard,
        parse_mode='Markdown'
    )
    
    # Store message text in context for later use
    context.user_data['broadcast_message'] = message_text
    logger.info("–ê–¥–º–∏–Ω %s –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª —Ä–∞—Å—Å—ã–ª–∫—É: %s", user.id, message_text[:50])

async def broadcast_info_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show user statistics (admin only)."""
    user = update.effective_user
    if not user or not is_admin(user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        stats = await get_user_stats()
        
        stats_text = f"""üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total']}
‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['active']}
üÜï –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {stats['new_week']}

üìà –ü—Ä–æ—Ü–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active']/max(stats['total'], 1)*100:.1f}% (–∏–∑ {stats['total']})"""
        
        await update.message.reply_text(stats_text, parse_mode='Markdown')
        logger.info("–ê–¥–º–∏–Ω %s –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", user.id)
        
    except Exception as exc:
        logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: %s", exc)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

def run_coro_in_loop(coro):
    loop = asyncio.get_event_loop()
    if loop.is_running():
        loop.create_task(coro)
    else:
        loop.run_until_complete(coro)

async def main() -> None:
    application: Application = ApplicationBuilder().token(BOT_TOKEN).build()
    
    # Add handlers
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("settings", settings_command))
    application.add_handler(CommandHandler("notify_on", notify_on_command))
    application.add_handler(CommandHandler("notify_off", notify_off_command))
    application.add_handler(CommandHandler("window", window_command))
    application.add_handler(CommandHandler("freq", freq_command))
    application.add_handler(CommandHandler("history", history_command))
    application.add_handler(CommandHandler("add_friend", add_friend_command))
    application.add_handler(CommandHandler("friend_requests", friend_requests_command))
    application.add_handler(CommandHandler("accept", accept_command))
    application.add_handler(CommandHandler("decline", decline_command))
    application.add_handler(CommandHandler("friends", friends_command))
    application.add_handler(CommandHandler("activities", activities_command))
    
    # Admin commands
    application.add_handler(CommandHandler("broadcast", broadcast_command))
    application.add_handler(CommandHandler("broadcast_info", broadcast_info_command))
    
    # Add callback query handler for inline keyboards
    application.add_handler(CallbackQueryHandler(handle_callback_query))
    
    # Add message handler (must be last)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_reply))
    
    # Scheduler for asking questions
    scheduler = AsyncIOScheduler()
    scheduler.add_job(
        lambda: run_coro_in_loop(ask_question(application)),
        "cron",
        minute="*"  # Every minute - we'll check user settings inside ask_question
    )
    scheduler.start()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ñ–¥—É —Å–∏–≥–Ω–∞–ª–∞...")
    await application.run_polling()

if __name__ == "__main__":
    import sys

    if sys.platform.startswith("win") and sys.version_info >= (3, 8):
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

    try:
        import nest_asyncio
        nest_asyncio.apply()
        loop = asyncio.get_event_loop()
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä—É—á–Ω—É—é.")
