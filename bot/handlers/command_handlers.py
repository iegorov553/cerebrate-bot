"""
Command handlers for the Doyobi Diary.

This module contains all user command handlers (non-admin).
"""

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, WebAppInfo
from telegram.ext import Application, CommandHandler, ContextTypes

from bot.cache.ttl_cache import TTLCache
from bot.config import Config
from bot.database.client import DatabaseClient
from bot.database.user_operations import UserOperations
from bot.i18n import detect_user_language, get_translator
from bot.keyboards.keyboard_generators import create_friends_menu, create_main_menu, create_settings_menu
from bot.utils.rate_limiter import MultiTierRateLimiter, rate_limit
from monitoring import get_logger, set_user_context, track_errors_async

logger = get_logger(__name__)


@rate_limit("general")
@track_errors_async("start_command")
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle /start command - register user and show main menu."""
    user = update.effective_user
    if user is None:
        return

    set_user_context(user.id, user.username, user.first_name)
    
    # Get dependencies from context
    db_client: DatabaseClient = context.bot_data['db_client']
    config: Config = context.bot_data['config']
    
    # Get user cache
    user_cache: TTLCache = context.bot_data['user_cache']
    
    # Detect user language
    user_language = detect_user_language(user)
    translator = get_translator()
    translator.set_language(user_language)
    
    # Ensure user exists in database
    user_ops = UserOperations(db_client, user_cache)
    try:
        await user_ops.ensure_user_exists(
            tg_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name,
            language=user_language
        )
    except Exception as e:
        logger.error(f"Failed to ensure user exists: {e}")
        await update.message.reply_text(
            translator.translate("errors.registration")
        )
        return

    # Create main menu
    keyboard = create_main_menu(config.is_admin_configured() and user.id == config.admin_user_id)
    
    welcome_text = f"{translator.translate('welcome.greeting', name=user.first_name)}\n\n" \
                   f"{translator.translate('welcome.description')}"

    await update.message.reply_text(
        welcome_text,
        reply_markup=keyboard,
        parse_mode='Markdown'
    )
    
    logger.info(f"User {user.id} opened main menu")


@rate_limit("settings")
@track_errors_async("settings_command")
async def settings_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show user settings from database."""
    user = update.effective_user
    if user is None:
        return

    set_user_context(user.id, user.username, user.first_name)
    
    # Get dependencies
    db_client: DatabaseClient = context.bot_data['db_client']
    user_cache: TTLCache = context.bot_data['user_cache']
    
    # Get user settings from database
    user_ops = UserOperations(db_client, user_cache)
    user_data = await user_ops.get_user_settings(user.id)
    
    if not user_data:
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start"
        )
        return
    
    # Create settings menu
    keyboard = create_settings_menu()
    
    settings_text = f"‚öôÔ∏è **–¢–≤–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**\n\n" \
                   f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if user_data['enabled'] else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}\n" \
                   f"‚è∞ –í—Ä–µ–º—è: {user_data['window_start']} - {user_data['window_end']}\n" \
                   f"üìä –ß–∞—Å—Ç–æ—Ç–∞: –∫–∞–∂–¥—ã–µ {user_data['interval_min']} –º–∏–Ω—É—Ç"

    await update.message.reply_text(
        settings_text,
        reply_markup=keyboard,
        parse_mode='Markdown'
    )


@rate_limit("general")
@track_errors_async("history_command")
async def history_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Open web interface for activity history."""
    user = update.effective_user
    if user is None:
        return

    set_user_context(user.id, user.username, user.first_name)
    
    config: Config = context.bot_data['config']
    db_client: DatabaseClient = context.bot_data['db_client']
    user_cache: TTLCache = context.bot_data['user_cache']
    
    # Get user translator
    from bot.handlers.callback_handlers import get_user_translator
    translator = await get_user_translator(user.id, db_client, user_cache)
    
    # Create web app button for main webapp page
    web_app = WebAppInfo(url=config.webapp_url)
    keyboard = InlineKeyboardMarkup([[
        InlineKeyboardButton("üåê " + translator.translate('menu.history'), web_app=web_app)
    ]])
    
    await update.message.reply_text(
        f"üåê **{translator.translate('menu.history')}**\n\n"
        f"{translator.translate('history.webapp_description')}",
        reply_markup=keyboard,
        parse_mode='Markdown'
    )


@rate_limit("friend_request")
@track_errors_async("add_friend_command")
async def add_friend_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle /add_friend command."""
    user = update.effective_user
    if user is None:
        return

    set_user_context(user.id, user.username, user.first_name)
    
    if not context.args:
        await update.message.reply_text(
            "üë• **–î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∞**\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/add_friend @username`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/add_friend @john_doe`",
            parse_mode='Markdown'
        )
        return
    
    # Extract and validate username
    target_username_raw = context.args[0]
    
    from bot.utils.datetime_utils import validate_username
    is_valid, error_msg = validate_username(target_username_raw)
    if not is_valid:
        await update.message.reply_text(
            f"‚ùå {error_msg}\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/add_friend @username`",
            parse_mode='Markdown'
        )
        return
    
    target_username = target_username_raw.lstrip('@')
    
    # Get dependencies
    db_client: DatabaseClient = context.bot_data['db_client']
    user_cache: TTLCache = context.bot_data['user_cache']
    
    # Implement friend request logic
    from bot.database.friend_operations import FriendOperations
    friend_ops = FriendOperations(db_client)
    user_ops = UserOperations(db_client, user_cache)
    
    # Find target user by username
    target_user = await user_ops.find_user_by_username(target_username)
    if not target_user:
        await update.message.reply_text(
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target_username} –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ."
        )
        return
    
    target_id = target_user['tg_id']
    
    # Send friend request (will check for existing friendship internally)
    success = await friend_ops.create_friend_request(user.id, target_id)
    if success:
        await update.message.reply_text(
            f"üì§ –ó–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{target_username}!\n\n"
            "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
        )
        
        # Notify target user if possible
        try:
            await context.bot.send_message(
                chat_id=target_id,
                text=f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username or user.first_name} —Ö–æ—á–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Å –≤ –¥—Ä—É–∑—å—è!\n\n"
                     f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /friend_requests –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞–º–∏."
            )
        except Exception as e:
            logger.warning(f"Could not notify user {target_id}: {e}")
            
    else:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ –¥—Ä—É–∑—å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


@rate_limit("general")
@track_errors_async("friends_command")
async def friends_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show friends menu."""
    user = update.effective_user
    if user is None:
        return

    set_user_context(user.id, user.username, user.first_name)
    
    # Create friends menu
    keyboard = create_friends_menu()
    
    await update.message.reply_text(
        "üë• **–î—Ä—É–∑—å—è**\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode='Markdown'
    )


@rate_limit("general")
@track_errors_async("friend_requests_command")
async def friend_requests_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show friend requests management."""
    user = update.effective_user
    if user is None:
        return

    set_user_context(user.id, user.username, user.first_name)
    
    # Get dependencies
    db_client: DatabaseClient = context.bot_data['db_client']
    
    from bot.database.friend_operations import FriendOperations
    friend_ops = FriendOperations(db_client)
    
    # Get friend requests
    requests_data = await friend_ops.get_friend_requests_optimized(user.id)
    
    incoming = requests_data.get('incoming', [])
    outgoing = requests_data.get('outgoing', [])
    
    text = "üì• **–ó–∞–ø—Ä–æ—Å—ã –≤ –¥—Ä—É–∑—å—è**\n\n"
    
    if incoming:
        text += "**–í—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã:**\n"
        for req in incoming[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
            username = req.get('tg_username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            name = req.get('tg_first_name', '')
            text += f"‚Ä¢ @{username} ({name})\n"
            text += f"  `/accept @{username}` | `/decline @{username}`\n\n"
    else:
        text += "**–í—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã:** –Ω–µ—Ç\n\n"
    
    if outgoing:
        text += "**–ò—Å—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã:**\n"
        for req in outgoing[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
            username = req.get('tg_username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            name = req.get('tg_first_name', '')
            text += f"‚Ä¢ @{username} ({name}) - –æ–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞\n"
    else:
        text += "**–ò—Å—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã:** –Ω–µ—Ç"
    
    await update.message.reply_text(text, parse_mode='Markdown')


@rate_limit("friend_request")
@track_errors_async("accept_friend_command")  
async def accept_friend_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Accept friend request."""
    user = update.effective_user
    if user is None:
        return

    set_user_context(user.id, user.username, user.first_name)
    
    if not context.args:
        await update.message.reply_text(
            "üë• **–ü—Ä–∏–Ω—è—Ç—å –≤ –¥—Ä—É–∑—å—è**\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/accept @username`",
            parse_mode='Markdown'
        )
        return
    
    target_username = context.args[0].lstrip('@')
    
    # Get dependencies
    db_client: DatabaseClient = context.bot_data['db_client']
    user_cache: TTLCache = context.bot_data['user_cache']
    
    from bot.database.friend_operations import FriendOperations
    from bot.database.user_operations import UserOperations
    
    friend_ops = FriendOperations(db_client)
    user_ops = UserOperations(db_client, user_cache)
    
    # Find requester by username
    requester = await user_ops.find_user_by_username(target_username)
    if not requester:
        await update.message.reply_text(
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target_username} –Ω–µ –Ω–∞–π–¥–µ–Ω."
        )
        return
    
    # Accept friend request
    success = await friend_ops.accept_friend_request(requester['tg_id'], user.id)
    if success:
        await update.message.reply_text(
            f"‚úÖ –ó–∞—è–≤–∫–∞ –≤ –¥—Ä—É–∑—å—è –æ—Ç @{target_username} –ø—Ä–∏–Ω—è—Ç–∞!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –¥—Ä—É–∑—å—è! üéâ"
        )
        
        # Notify requester if possible
        try:
            await context.bot.send_message(
                chat_id=requester['tg_id'],
                text=f"üéâ @{user.username or user.first_name} –ø—Ä–∏–Ω—è–ª –≤–∞—à—É –∑–∞—è–≤–∫—É –≤ –¥—Ä—É–∑—å—è!"
            )
        except Exception as e:
            logger.warning(f"Could not notify user {requester['tg_id']}: {e}")
    else:
        await update.message.reply_text(
            f"‚ùå –ó–∞—è–≤–∫–∏ –≤ –¥—Ä—É–∑—å—è –æ—Ç @{target_username} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –æ–Ω–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞."
        )


@rate_limit("friend_request")
@track_errors_async("decline_friend_command")
async def decline_friend_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Decline friend request."""
    user = update.effective_user
    if user is None:
        return

    set_user_context(user.id, user.username, user.first_name)
    
    if not context.args:
        await update.message.reply_text(
            "üë• **–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É**\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/decline @username`",
            parse_mode='Markdown'
        )
        return
    
    target_username = context.args[0].lstrip('@')
    
    # Get dependencies
    db_client: DatabaseClient = context.bot_data['db_client']
    user_cache: TTLCache = context.bot_data['user_cache']
    
    from bot.database.friend_operations import FriendOperations
    from bot.database.user_operations import UserOperations
    
    friend_ops = FriendOperations(db_client)
    user_ops = UserOperations(db_client, user_cache)
    
    # Find requester by username
    requester = await user_ops.find_user_by_username(target_username)
    if not requester:
        await update.message.reply_text(
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target_username} –Ω–µ –Ω–∞–π–¥–µ–Ω."
        )
        return
    
    # Decline friend request
    success = await friend_ops.decline_friend_request(requester['tg_id'], user.id)
    if success:
        await update.message.reply_text(
            f"‚ùå –ó–∞—è–≤–∫–∞ –≤ –¥—Ä—É–∑—å—è –æ—Ç @{target_username} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞."
        )
        
        # Notify requester if possible
        try:
            await context.bot.send_message(
                chat_id=requester['tg_id'],
                text=f"‚ùå @{user.username or user.first_name} –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à—É –∑–∞—è–≤–∫—É –≤ –¥—Ä—É–∑—å—è."
            )
        except Exception as e:
            logger.warning(f"Could not notify user {requester['tg_id']}: {e}")
    else:
        await update.message.reply_text(
            f"‚ùå –ó–∞—è–≤–∫–∏ –≤ –¥—Ä—É–∑—å—è –æ—Ç @{target_username} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –æ–Ω–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞."
        )


@rate_limit("settings")
@track_errors_async("window_command")
async def window_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Set time window for default question notifications."""
    user = update.effective_user
    if user is None:
        return

    set_user_context(user.id, user.username, user.first_name)
    
    if not context.args:
        await update.message.reply_text(
            "‚è∞ **–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ**\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/window HH:MM-HH:MM`\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ `/window 09:00-18:00` - —Å 9 —É—Ç—Ä–∞ –¥–æ 6 –≤–µ—á–µ—Ä–∞\n"
            "‚Ä¢ `/window 22:00-06:00` - —Å 10 –≤–µ—á–µ—Ä–∞ –¥–æ 6 —É—Ç—Ä–∞",
            parse_mode='Markdown'
        )
        return
    
    time_range = context.args[0]
    
    # Validate time format
    from bot.utils.datetime_utils import validate_time_window
    is_valid, error_msg, start_time, end_time = validate_time_window(time_range)
    if not is_valid:
        await update.message.reply_text(
            f"‚ùå {error_msg}\n\n"
            "–§–æ—Ä–º–∞—Ç: `HH:MM-HH:MM`\n"
            "–ü—Ä–∏–º–µ—Ä: `/window 09:00-22:00`",
            parse_mode='Markdown'
        )
        return
    
    # Get dependencies
    db_client: DatabaseClient = context.bot_data['db_client']
    user_cache: TTLCache = context.bot_data['user_cache']
    
    # Initialize question manager and ensure user has default question
    from bot.questions import QuestionManager
    question_manager = QuestionManager(db_client, user_cache)
    
    try:
        # Ensure user has default question
        await question_manager.ensure_user_has_default_question(user.id)
        
        # Get default question
        default_question = await question_manager.get_user_default_question(user.id)
        if not default_question:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start"
            )
            return
        
        # Update time window for default question
        success = await question_manager.question_ops.update_question_schedule(
            default_question['id'], 
            window_start=start_time.strftime('%H:%M:%S'),
            window_end=end_time.strftime('%H:%M:%S')
        )
        
        if success:
            await update.message.reply_text(
                f"‚úÖ **–í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!**\n\n"
                f"‚è∞ –ù–æ–≤–æ–µ –≤—Ä–µ–º—è: {start_time.strftime('%H:%M')} - {end_time.strftime('%H:%M')}\n\n"
                f"–¢–µ–ø–µ—Ä—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤ —ç—Ç–æ –≤—Ä–µ–º—è.",
                parse_mode='Markdown'
            )
            logger.info(f"Time window updated for user {user.id}: {time_range}")
        else:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    except Exception as e:
        logger.error(f"Error updating time window for user {user.id}: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


@rate_limit("settings")
@track_errors_async("freq_command")
async def freq_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Set notification frequency for default question."""
    user = update.effective_user
    if user is None:
        return

    set_user_context(user.id, user.username, user.first_name)
    
    if not context.args:
        await update.message.reply_text(
            "üìä **–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π**\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/freq N`\n\n"
            "–ì–¥–µ N - –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏.\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ `/freq 60` - –∫–∞–∂–¥—ã–π —á–∞—Å\n"
            "‚Ä¢ `/freq 120` - –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞\n"
            "‚Ä¢ `/freq 30` - –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç",
            parse_mode='Markdown'
        )
        return
    
    try:
        interval_min = int(context.args[0])
        if interval_min < 5:
            await update.message.reply_text(
                "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: 5 –º–∏–Ω—É—Ç\n\n"
                "–ü—Ä–∏–º–µ—Ä: `/freq 30`"
            )
            return
        elif interval_min > 1440:  # 24 hours
            await update.message.reply_text(
                "‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: 1440 –º–∏–Ω—É—Ç (24 —á–∞—Å–∞)\n\n"
                "–ü—Ä–∏–º–µ—Ä: `/freq 120`"
            )
            return
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/freq N`\n"
            "–ü—Ä–∏–º–µ—Ä: `/freq 60`"
        )
        return
    
    # Get dependencies
    db_client: DatabaseClient = context.bot_data['db_client']
    user_cache: TTLCache = context.bot_data['user_cache']
    
    # Initialize question manager and ensure user has default question
    from bot.questions import QuestionManager
    question_manager = QuestionManager(db_client, user_cache)
    
    try:
        # Ensure user has default question
        await question_manager.ensure_user_has_default_question(user.id)
        
        # Get default question
        default_question = await question_manager.get_user_default_question(user.id)
        if not default_question:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start"
            )
            return
        
        # Update frequency for default question
        success = await question_manager.question_ops.update_question_schedule(
            default_question['id'], 
            interval_minutes=interval_min
        )
        
        if success:
            # Calculate human-readable frequency
            if interval_min < 60:
                freq_text = f"{interval_min} –º–∏–Ω—É—Ç"
            elif interval_min == 60:
                freq_text = "1 —á–∞—Å"
            elif interval_min < 1440:
                hours = interval_min // 60
                minutes = interval_min % 60
                if minutes == 0:
                    freq_text = f"{hours} —á–∞—Å{'–∞' if hours < 5 else '–æ–≤'}"
                else:
                    freq_text = f"{hours} —á–∞—Å{'–∞' if hours < 5 else '–æ–≤'} {minutes} –º–∏–Ω—É—Ç"
            else:
                freq_text = f"{interval_min // 60} —á–∞—Å–æ–≤"
            
            await update.message.reply_text(
                f"‚úÖ **–ß–∞—Å—Ç–æ—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–∞!**\n\n"
                f"üìä –ù–æ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞: –∫–∞–∂–¥—ã–µ {freq_text}\n\n"
                f"–°–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–¥—ë—Ç —á–µ—Ä–µ–∑ {freq_text}.",
                parse_mode='Markdown'
            )
            logger.info(f"Frequency updated for user {user.id}: {interval_min} minutes")
        else:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–∞—Å—Ç–æ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    except Exception as e:
        logger.error(f"Error updating frequency for user {user.id}: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


def setup_command_handlers(
    application: Application,
    db_client: DatabaseClient,
    user_cache: TTLCache,
    rate_limiter: MultiTierRateLimiter,
    config: Config
) -> None:
    """Setup all command handlers."""
    
    # Store dependencies in bot_data for access in handlers
    application.bot_data.update({
        'db_client': db_client,
        'user_cache': user_cache,
        'rate_limiter': rate_limiter,
        'config': config
    })
    
    # Register command handlers
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("settings", settings_command))
    application.add_handler(CommandHandler("history", history_command))
    application.add_handler(CommandHandler("add_friend", add_friend_command))
    application.add_handler(CommandHandler("friends", friends_command))
    application.add_handler(CommandHandler("friend_requests", friend_requests_command))
    application.add_handler(CommandHandler("accept", accept_friend_command))
    application.add_handler(CommandHandler("decline", decline_friend_command))
    application.add_handler(CommandHandler("window", window_command))
    application.add_handler(CommandHandler("freq", freq_command))
    
    logger.info("Command handlers registered successfully")