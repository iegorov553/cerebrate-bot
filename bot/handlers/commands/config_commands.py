"""Configuration commands: window, freq."""

from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

from bot.cache.ttl_cache import TTLCache
from bot.database.client import DatabaseClient
from bot.utils.rate_limiter import rate_limit
from monitoring import get_logger, set_user_context, track_errors_async

logger = get_logger(__name__)


@rate_limit("settings")
@track_errors_async("window_command")
async def window_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Set time window for default question notifications."""
    user = update.effective_user
    if user is None:
        return

    set_user_context(user.id, user.username, user.first_name)

    if not context.args:
        await update.message.reply_text(
            "‚è∞ **–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ**\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/window HH:MM-HH:MM`\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ `/window 09:00-18:00` - —Å 9 —É—Ç—Ä–∞ –¥–æ 6 –≤–µ—á–µ—Ä–∞\n"
            "‚Ä¢ `/window 22:00-06:00` - —Å 10 –≤–µ—á–µ—Ä–∞ –¥–æ 6 —É—Ç—Ä–∞",
            parse_mode='Markdown'
        )
        return

    time_range = context.args[0]

    # Validate time format
    from bot.utils.datetime_utils import validate_time_window
    is_valid, error_msg, start_time, end_time = validate_time_window(time_range)
    if not is_valid:
        await update.message.reply_text(
            f"‚ùå {error_msg}\n\n"
            "–§–æ—Ä–º–∞—Ç: `HH:MM-HH:MM`\n"
            "–ü—Ä–∏–º–µ—Ä: `/window 09:00-22:00`",
            parse_mode='Markdown'
        )
        return

    # Get dependencies
    db_client: DatabaseClient = context.bot_data['db_client']
    user_cache: TTLCache = context.bot_data['user_cache']

    # Initialize question manager and ensure user has default question
    from bot.questions import QuestionManager
    question_manager = QuestionManager(db_client, user_cache)

    try:
        # Ensure user has default question
        await question_manager.ensure_user_has_default_question(user.id)

        # Get default question
        default_question = await question_manager.get_user_default_question(user.id)
        if not default_question:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start"
            )
            return

        # Update time window for default question
        success = await question_manager.question_ops.update_question_schedule(
            default_question['id'],
            window_start=start_time.strftime('%H:%M:%S'),
            window_end=end_time.strftime('%H:%M:%S')
        )

        if success:
            await update.message.reply_text(
                f"‚úÖ **–í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!**\n\n"
                f"‚è∞ –ù–æ–≤–æ–µ –≤—Ä–µ–º—è: {start_time.strftime('%H:%M')} - {end_time.strftime('%H:%M')}\n\n"
                f"–¢–µ–ø–µ—Ä—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤ —ç—Ç–æ –≤—Ä–µ–º—è.",
                parse_mode='Markdown'
            )
            logger.info(f"Time window updated for user {user.id}: {time_range}")
        else:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    except Exception as e:
        logger.error(f"Error updating time window for user {user.id}: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


@rate_limit("settings")
@track_errors_async("freq_command")
async def freq_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Set notification frequency for default question."""
    user = update.effective_user
    if user is None:
        return

    set_user_context(user.id, user.username, user.first_name)

    if not context.args:
        await update.message.reply_text(
            "üìä **–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π**\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/freq N`\n\n"
            "–ì–¥–µ N - –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏.\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ `/freq 60` - –∫–∞–∂–¥—ã–π —á–∞—Å\n"
            "‚Ä¢ `/freq 120` - –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞\n"
            "‚Ä¢ `/freq 30` - –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç",
            parse_mode='Markdown'
        )
        return

    try:
        interval_min = int(context.args[0])
        if interval_min < 5:
            await update.message.reply_text(
                "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: 5 –º–∏–Ω—É—Ç\n\n"
                "–ü—Ä–∏–º–µ—Ä: `/freq 30`"
            )
            return
        elif interval_min > 1440:  # 24 hours
            await update.message.reply_text(
                "‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: 1440 –º–∏–Ω—É—Ç (24 —á–∞—Å–∞)\n\n"
                "–ü—Ä–∏–º–µ—Ä: `/freq 120`"
            )
            return
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/freq N`\n"
            "–ü—Ä–∏–º–µ—Ä: `/freq 60`"
        )
        return

    # Get dependencies
    db_client: DatabaseClient = context.bot_data['db_client']
    user_cache: TTLCache = context.bot_data['user_cache']

    # Initialize question manager and ensure user has default question
    from bot.questions import QuestionManager
    question_manager = QuestionManager(db_client, user_cache)

    try:
        # Ensure user has default question
        await question_manager.ensure_user_has_default_question(user.id)

        # Get default question
        default_question = await question_manager.get_user_default_question(user.id)
        if not default_question:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start"
            )
            return

        # Update frequency for default question
        success = await question_manager.question_ops.update_question_schedule(
            default_question['id'],
            interval_minutes=interval_min
        )

        if success:
            # Calculate human-readable frequency
            if interval_min < 60:
                freq_text = f"{interval_min} –º–∏–Ω—É—Ç"
            elif interval_min == 60:
                freq_text = "1 —á–∞—Å"
            elif interval_min < 1440:
                hours = interval_min // 60
                minutes = interval_min % 60
                if minutes == 0:
                    freq_text = f"{hours} —á–∞—Å{'–∞' if hours < 5 else '–æ–≤'}"
                else:
                    freq_text = f"{hours} —á–∞—Å{'–∞' if hours < 5 else '–æ–≤'} {minutes} –º–∏–Ω—É—Ç"
            else:
                freq_text = f"{interval_min // 60} —á–∞—Å–æ–≤"

            await update.message.reply_text(
                f"‚úÖ **–ß–∞—Å—Ç–æ—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–∞!**\n\n"
                f"üìä –ù–æ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞: –∫–∞–∂–¥—ã–µ {freq_text}\n\n"
                f"–°–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–¥—ë—Ç —á–µ—Ä–µ–∑ {freq_text}.",
                parse_mode='Markdown'
            )
            logger.info(f"Frequency updated for user {user.id}: {interval_min} minutes")
        else:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–∞—Å—Ç–æ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    except Exception as e:
        logger.error(f"Error updating frequency for user {user.id}: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


def setup_config_commands(application: Application) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."""
    application.add_handler(CommandHandler("window", window_command))
    application.add_handler(CommandHandler("freq", freq_command))
    
    logger.info("Config commands registered successfully")