#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Doyobi Diary Bot

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:
- –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
- –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
- –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω–¥–µ–∫—Å—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
- –¢–µ—Å—Ç–∏—Ä—É–µ—Ç RLS –ø–æ–ª–∏—Ç–∏–∫–∏
- –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python3 scripts/test_migration.py

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
    - SUPABASE_URL –∏ SUPABASE_SERVICE_ROLE_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    - –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–∞–∫–µ—Ç supabase
"""

import os
import sys
import asyncio
from datetime import datetime
from typing import Dict, List, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from supabase import create_client, Client
from bot.config import Config


class MigrationTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        self.config = Config()
        
        if not self.config.SUPABASE_URL or not self.config.SUPABASE_SERVICE_ROLE_KEY:
            raise ValueError(
                "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è SUPABASE_URL –∏–ª–∏ SUPABASE_SERVICE_ROLE_KEY"
            )
        
        self.supabase: Client = create_client(
            self.config.SUPABASE_URL, 
            self.config.SUPABASE_SERVICE_ROLE_KEY
        )
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    def test_tables_created(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã"""
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü...")
        
        required_tables = [
            'users', 
            'tg_jobs', 
            'friendships', 
            'user_questions', 
            'question_notifications'
        ]
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
            result = self.supabase.rpc(
                'exec_sql', 
                {
                    'query': '''
                        SELECT table_name 
                        FROM information_schema.tables 
                        WHERE table_schema = 'public' 
                        AND table_type = 'BASE TABLE'
                        ORDER BY table_name
                    '''
                }
            ).execute()
            
            existing_tables = [row['result']['table_name'] for row in result.data]
            
            missing_tables = []
            for table in required_tables:
                if table in existing_tables:
                    print(f"  ‚úÖ {table}")
                else:
                    print(f"  ‚ùå {table} - –û–¢–°–£–¢–°–¢–í–£–ï–¢")
                    missing_tables.append(table)
            
            if missing_tables:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã: {', '.join(missing_tables)}")
                return False
            
            print(f"‚úÖ –í—Å–µ {len(required_tables)} —Ç–∞–±–ª–∏—Ü —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü: {e}")
            return False
    
    def test_functions_created(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã"""
        print("\nüöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...")
        
        required_functions = [
            'exec_sql',
            'get_friend_requests_optimized',
            'get_friends_list_optimized', 
            'get_friends_of_friends_optimized',
            'get_user_stats',
            'cleanup_expired_notifications'
        ]
        
        try:
            result = self.supabase.rpc(
                'exec_sql',
                {
                    'query': '''
                        SELECT routine_name 
                        FROM information_schema.routines 
                        WHERE routine_schema = 'public' 
                        AND routine_type = 'FUNCTION'
                        ORDER BY routine_name
                    '''
                }
            ).execute()
            
            existing_functions = [row['result']['routine_name'] for row in result.data]
            
            missing_functions = []
            for func in required_functions:
                if func in existing_functions:
                    print(f"  ‚úÖ {func}")
                else:
                    print(f"  ‚ùå {func} - –û–¢–°–£–¢–°–¢–í–£–ï–¢")
                    missing_functions.append(func)
            
            if missing_functions:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ—É–Ω–∫—Ü–∏–∏: {', '.join(missing_functions)}")
                return False
            
            print(f"‚úÖ –í—Å–µ {len(required_functions)} —Ñ—É–Ω–∫—Ü–∏–π —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ—É–Ω–∫—Ü–∏–π: {e}")
            return False
    
    def test_indexes_created(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã"""
        print("\nüìà –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤...")
        
        try:
            result = self.supabase.rpc(
                'exec_sql',
                {
                    'query': '''
                        SELECT indexname, tablename 
                        FROM pg_indexes 
                        WHERE schemaname = 'public'
                        ORDER BY tablename, indexname
                    '''
                }
            ).execute()
            
            indexes = [(row['result']['tablename'], row['result']['indexname']) for row in result.data]
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å—ã –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º
            indexes_by_table = {}
            for table, index in indexes:
                if table not in indexes_by_table:
                    indexes_by_table[table] = []
                indexes_by_table[table].append(index)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
            critical_indexes = {
                'users': ['idx_users_last_notification_sent', 'idx_users_language'],
                'tg_jobs': ['idx_tg_jobs_tg_id', 'idx_tg_jobs_question'],
                'friendships': ['idx_friendships_requester', 'idx_friendships_addressee'],
                'user_questions': ['idx_user_questions_default', 'idx_user_questions_user_active']
            }
            
            total_indexes = sum(len(idx_list) for idx_list in indexes_by_table.values())
            missing_critical = []
            
            for table, expected_indexes in critical_indexes.items():
                table_indexes = indexes_by_table.get(table, [])
                for expected_idx in expected_indexes:
                    if expected_idx in table_indexes:
                        print(f"  ‚úÖ {table}.{expected_idx}")
                    else:
                        print(f"  ‚ùå {table}.{expected_idx} - –û–¢–°–£–¢–°–¢–í–£–ï–¢")
                        missing_critical.append(f"{table}.{expected_idx}")
            
            if missing_critical:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã: {', '.join(missing_critical)}")
                return False
            
            print(f"‚úÖ –í—Å–µ–≥–æ –∏–Ω–¥–µ–∫—Å–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {total_indexes}")
            print("‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –Ω–∞ –º–µ—Å—Ç–µ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–Ω–¥–µ–∫—Å–æ–≤: {e}")
            return False
    
    def test_test_data(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"""
        print("\nüë• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users_result = self.supabase.table('users').select('tg_id, tg_username, language').execute()
            users_count = len(users_result.data)
            print(f"  ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–ø—Ä–æ—Å—ã
            questions_result = self.supabase.table('user_questions').select('id, user_id, is_default').execute()
            questions_count = len(questions_result.data)
            default_questions = sum(1 for q in questions_result.data if q['is_default'])
            print(f"  ‚úÖ –í–æ–ø—Ä–æ—Å–æ–≤: {questions_count} (–¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö: {default_questions})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            jobs_result = self.supabase.table('tg_jobs').select('id, tg_id, question_id').execute()
            jobs_count = len(jobs_result.data)
            jobs_with_questions = sum(1 for j in jobs_result.data if j['question_id'])
            print(f"  ‚úÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π: {jobs_count} (—Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –≤–æ–ø—Ä–æ—Å–∞–º: {jobs_with_questions})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–∂–µ—Å–∫–∏–µ —Å–≤—è–∑–∏
            friendships_result = self.supabase.table('friendships').select('friendship_id, status').execute()
            friendships_count = len(friendships_result.data)
            print(f"  ‚úÖ –î—Ä—É–∂–µ—Å–∫–∏—Ö —Å–≤—è–∑–µ–π: {friendships_count}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: —É –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å
            if users_count != default_questions:
                print(f"‚ùå –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: {users_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–æ {default_questions} –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
                return False
            
            print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def test_optimization_functions(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Ñ—É–Ω–∫—Ü–∏–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        print("\n‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...")
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            stats_result = self.supabase.rpc('get_user_stats').execute()
            if stats_result.data:
                stats = stats_result.data[0]
                print(f"  ‚úÖ get_user_stats: {stats['total_users']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, {stats['active_users']} –∞–∫—Ç–∏–≤–Ω—ã—Ö")
            else:
                print("  ‚ùå get_user_stats: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º ID –ø–µ—Ä–≤–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            users_result = self.supabase.table('users').select('tg_id').limit(1).execute()
            if not users_result.data:
                print("  ‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                return False
            
            test_user_id = users_result.data[0]['tg_id']
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π
            friends_result = self.supabase.rpc(
                'get_friends_list_optimized', 
                {'p_user_id': test_user_id}
            ).execute()
            print(f"  ‚úÖ get_friends_list_optimized: {len(friends_result.data)} –¥—Ä—É–∑–µ–π")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –≤ –¥—Ä—É–∑—å—è
            requests_result = self.supabase.rpc(
                'get_friend_requests_optimized',
                {'p_user_id': test_user_id}
            ).execute()
            print(f"  ‚úÖ get_friend_requests_optimized: {len(requests_result.data)} –∑–∞–ø—Ä–æ—Å–æ–≤")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –¥—Ä—É–∑–µ–π –¥—Ä—É–∑–µ–π
            discovery_result = self.supabase.rpc(
                'get_friends_of_friends_optimized',
                {'p_user_id': test_user_id, 'p_limit': 5}
            ).execute()
            print(f"  ‚úÖ get_friends_of_friends_optimized: {len(discovery_result.data)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
            
            print("‚úÖ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π: {e}")
            return False
    
    def test_constraints(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print("\nüîí –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π...")
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                self.supabase.table('users').insert({
                    'tg_id': 999999999,
                    'tg_username': 'test_constraint',
                    'language': 'invalid_lang'  # –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —è–∑—ã–∫
                }).execute()
                print("  ‚ùå –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —è–∑—ã–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return False
            except Exception:
                print("  ‚úÖ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —è–∑—ã–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –¥—Ä—É–∂–±—É —Å —Å–∞–º–∏–º —Å–æ–±–æ–π
            try:
                self.supabase.table('friendships').insert({
                    'requester_id': 123456789,
                    'addressee_id': 123456789  # –¢–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                }).execute()
                print("  ‚ùå –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –¥—Ä—É–∂–±—É —Å —Å–æ–±–æ–π –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return False
            except Exception:
                print("  ‚úÖ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –¥—Ä—É–∂–±—É —Å —Å–æ–±–æ–π —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –≤–æ–ø—Ä–æ—Å–∞—Ö
            try:
                test_user_id = 123456789
                self.supabase.table('user_questions').insert({
                    'user_id': test_user_id,
                    'question_name': 'Test Question',
                    'question_text': 'Test?',
                    'interval_minutes': 15  # –ú–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ (30)
                }).execute()
                print("  ‚ùå –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return False
            except Exception:
                print("  ‚úÖ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            print("‚úÖ –í—Å–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π: {e}")
            return False
    
    def run_all_tests(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ú–ü–õ–ï–ö–°–ù–û–ô –ú–ò–ì–†–ê–¶–ò–ò DOYOBI DIARY BOT")
        print("=" * 60)
        
        tests = [
            ("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü", self.test_tables_created),
            ("–°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π", self.test_functions_created),
            ("–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤", self.test_indexes_created),
            ("–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ", self.test_test_data),
            ("–§—É–Ω–∫—Ü–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏", self.test_optimization_functions),
            ("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ë–î", self.test_constraints)
        ]
        
        passed_tests = 0
        total_tests = len(tests)
        
        for test_name, test_func in tests:
            try:
                if test_func():
                    passed_tests += 1
                else:
                    print(f"\n‚ùå –¢–µ—Å—Ç '{test_name}' –ø—Ä–æ–≤–∞–ª–µ–Ω")
            except Exception as e:
                print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
        
        print("\n" + "=" * 60)
        print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        
        if passed_tests == total_tests:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´")
            print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º")
            return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        tester = MigrationTester()
        success = tester.run_all_tests()
        sys.exit(0 if success else 1)
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()