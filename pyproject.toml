[tool.ruff]
# Core configuration
line-length = 127
target-version = "py38"

# File exclusions
exclude = [
    ".eggs",
    ".git",
    ".hg", 
    ".mypy_cache",
    ".tox",
    ".venv",
    "venv",
    "test_env",
    "_build",
    "buck-out",
    "build",
    "dist",
    "webapp",
    "__pycache__",
]

# Enable rule categories
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "UP",   # pyupgrade
    "C4",   # flake8-comprehensions
    "B",    # flake8-bugbear
    "A",    # flake8-builtins
    "PIE",  # flake8-pie
    "T20",  # flake8-print (no print statements)
    "RET",  # flake8-return
    "SIM",  # flake8-simplify
    "PTH",  # flake8-use-pathlib
]

# Disable specific rules that might be too strict for this project
ignore = [
    "E501",   # Line too long (handled by line-length)
    "A003",   # builtin-attribute-shadowing (too strict for this codebase)
    "T201",   # print statements (allow for debugging)
    "PIE790", # no-unnecessary-pass (allow pass in empty functions)
    "SIM108", # if-else-block-instead-of-if-exp (readability preference)
    "RET504", # unnecessary-assign (sometimes improves readability)
    "UP006",  # non-pep585-annotation (py38 compatibility)
    "UP007",  # non-pep604-annotation (py38 compatibility)
]

# Allow autofix for safe rules
fixable = ["E", "W", "F", "I", "N", "UP", "C4", "B", "PIE", "RET", "SIM"]
unfixable = []

# Show fixes in output
show-fixes = true

[tool.ruff.format]
# Use double quotes for strings
quote-style = "double"

# Use spaces around brackets
indent-style = "space"

# Respect magic trailing comma
skip-magic-trailing-comma = false

# Format docstrings
docstring-code-format = true

[tool.ruff.isort]
# isort compatibility settings
combine-as-imports = true
force-sort-within-sections = false
force-wrap-aliases = false
split-on-trailing-comma = true

# Known first party
known-first-party = ["bot"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Start with loose typing
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
exclude = [
    "venv/",
    "test_env/", 
    "webapp/",
    "tests/"
]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["."]
omit = [
    "tests/*",
    "venv/*",
    "test_env/*",
    "webapp/*",
    ".pytest_cache/*",
    "*/__pycache__/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]